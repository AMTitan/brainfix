// Generated by Bisonc++ V6.03.00 on Mon, 10 Jan 2022 19:42:15 +0100

#ifndef Parser_h_included
#define Parser_h_included

// $insert baseclass
#include "parserbase.h"
// $insert scanner.h
#include "scanner.h"


#undef Parser
// CAVEAT: between the baseclass-include directive and the 
// #undef directive in the previous line references to Parser 
// are read as ParserBase.
// If you need to include additional headers in this file 
// you should do so after these comment-lines.

class Compiler;

class Parser: public ParserBase
{
    // $insert scannerobject
    Scanner d_scanner;
	Compiler &d_comp;
	
public:
	Parser(std::string const &filename, Compiler &comp);
	using ParserBase::ERROR;
	using ParserBase::ABORT;

	int parse();

	int lineNr() const;
	std::string filename() const;

private:
	void error();                   // called on (syntax) errors
	int lex();                      // returns the next token from the
	// lexical scanner. 
	void print();                   // use, e.g., d_token, d_loc
	void exceptionHandler(std::exception const &exc);

    // support functions for parse():
	void executeAction_(int ruleNr);
	void errorRecovery_();
	void nextCycle_();
	void nextToken_();
	void print_();
};

inline int Parser::lineNr() const
{
	return d_scanner.lineNr();
}

inline std::string Parser::filename() const
{
	return d_scanner.filename();
}

#endif
