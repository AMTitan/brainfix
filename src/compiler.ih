#include "compiler.h"
#include <algorithm>

template <typename First, typename ... Args>
void Compiler::errorIf(bool const condition, First const &first, Args&& ... rest) const
{
	if (!condition) return;

	std::cerr << "Error in " << filename() << " on line " << lineNr() << ": " << first;
	(std::cerr << ... << rest) << '\n';

	try {
		d_parser.ERROR();
	}
	catch (...)
	{
		std::cerr << "Unable to recover: compilation terminated.\n";
		std::exit(1);
	}
}

template <typename ... Args>
void Compiler::validateAddr__(std::string const &function, Args&& ... args) const
{
	if (((args < 0) || ...))
	{
		std::cerr << "Fatal internal error while compiling " << filename()
				  << ", line " << lineNr()
				  << ": negative address passed to " << function << "()\n\n"
				  << "Compilation terminated\n";
		std::exit(1);
	}

	if ((((int)args >= (int)d_memory.size()) || ...))
	{
		std::cerr << "Fatal internal error while compiling " << filename()
				  << ", line " << lineNr()
				  << ": address out of bounds passed to " << function << "()\n\n"
				  << "Compilation terminated.\n";

		std::exit(1);
	}
}

#define validateAddr(...) validateAddr__(__func__, __VA_ARGS__)
