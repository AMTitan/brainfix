// Generated by Bisonc++ V6.03.00 on Fri, 04 Feb 2022 11:47:16 +0100

// base/comment

// $insert class.ih
#include "parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token is Reserved_::UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN_ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on errTok_
// which is applied. In this errTok_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
//      }

// base/declarations

namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum Reserved_
    {
        UNDETERMINED_   = -2,
        EOF_            = -1,
        errTok_         = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    inline bool operator&(StateType lhs, StateType rhs)
    {
        return (static_cast<int>(lhs) & rhs) != 0;
    }
    enum StateTransition
    {
        ACCEPT_   = 0,     // `ACCEPT' TRANSITION
    };

    struct PI_     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR_     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            StateType d_type;
            int       d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
        };
    };

    // $insert staticdata
    
    enum                        // size to expand the state-stack with when
    {                           // full
        STACK_EXPANSION_ = 10
    };

// Productions Info Records:
PI_ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {311, 0}, // 1: program ->  <empty>
     {311, 2}, // 2: program (errTok_) ->  program errTok_
     {311, 2}, // 3: program ->  program function_definition
     {311, 2}, // 4: program ->  program global_variable_list
     {311, 2}, // 5: program ->  program include_directive
     {311, 2}, // 6: program ->  program const_definition
     {314, 2}, // 7: include_directive (INCLUDE) ->  INCLUDE STR
     {312, 2}, // 8: function_definition ->  function_header scope_block
     {316, 5}, // 9: function_header (FUNCTION) ->  FUNCTION IDENT '(' optional_parameter_list ')'
     {316, 7}, // 10: function_header (FUNCTION) ->  FUNCTION IDENT '=' IDENT '(' optional_parameter_list ')'
     {315, 5}, // 11: const_definition (CONST) ->  CONST IDENT '=' NUM ';'
     {315, 5}, // 12: const_definition (CONST) ->  CONST IDENT '=' CHR ';'
     {317, 3}, // 13: scope_block ('{') ->  '{' code_body '}'
     {318, 1}, // 14: parameter (IDENT) ->  IDENT
     {318, 2}, // 15: parameter ('&') ->  '&' IDENT
     {319, 1}, // 16: parameter_list ->  parameter
     {319, 3}, // 17: parameter_list (',') ->  parameter_list ',' parameter
     {320, 1}, // 18: optional_parameter_list ->  parameter_list
     {320, 0}, // 19: optional_parameter_list ->  <empty>
     {313, 3}, // 20: global_variable_list (GLOBAL) ->  GLOBAL variable_specification_list ';'
     {321, 0}, // 21: code_body ->  <empty>
     {321, 2}, // 22: code_body ->  code_body statement
     {322, 2}, // 23: statement (errTok_) ->  errTok_ ';'
     {322, 1}, // 24: statement (';') ->  ';'
     {322, 2}, // 25: statement (';') ->  expression ';'
     {322, 1}, // 26: statement ->  scope_block
     {322, 5}, // 27: statement (INLINE_BF) ->  INLINE_BF '(' STR ')' ';'
     {322, 5}, // 28: statement (MOVE_PTR) ->  MOVE_PTR '(' IDENT ')' ';'
     {322, 1}, // 29: statement ->  for_statement
     {322, 1}, // 30: statement ->  if_statement
     {322, 1}, // 31: statement ->  while_statement
     {324, 1}, // 32: expression ->  variable_declaration
     {324, 1}, // 33: expression ->  variable
     {324, 2}, // 34: expression (unaryMinus) ->  '-' expression
     {324, 1}, // 35: expression ->  array_element
     {324, 1}, // 36: expression ->  constant_literal
     {324, 1}, // 37: expression ->  string_literal
     {324, 1}, // 38: expression ->  anonymous_array
     {324, 1}, // 39: expression ->  function_call
     {324, 4}, // 40: expression (SIZEOF) ->  SIZEOF '(' IDENT ')'
     {324, 3}, // 41: expression ('=') ->  variable_declaration '=' expression
     {324, 3}, // 42: expression ('=') ->  variable '=' expression
     {324, 3}, // 43: expression ('=') ->  array_element '=' expression
     {324, 3}, // 44: expression ('(') ->  '(' expression ')'
     {324, 2}, // 45: expression (INC) ->  INC variable
     {324, 2}, // 46: expression (DEC) ->  DEC variable
     {324, 2}, // 47: expression (INC) ->  variable INC
     {324, 2}, // 48: expression (DEC) ->  variable DEC
     {324, 2}, // 49: expression (INC) ->  INC array_element
     {324, 2}, // 50: expression (DEC) ->  DEC array_element
     {324, 2}, // 51: expression (INC) ->  array_element INC
     {324, 2}, // 52: expression (DEC) ->  array_element DEC
     {324, 3}, // 53: expression (ADD) ->  variable ADD expression
     {324, 3}, // 54: expression (ADD) ->  array_element ADD expression
     {324, 3}, // 55: expression ('+') ->  expression '+' expression
     {324, 3}, // 56: expression (SUB) ->  variable SUB expression
     {324, 3}, // 57: expression (SUB) ->  array_element SUB expression
     {324, 3}, // 58: expression ('-') ->  expression '-' expression
     {324, 3}, // 59: expression (MUL) ->  variable MUL expression
     {324, 3}, // 60: expression (MUL) ->  array_element MUL expression
     {324, 3}, // 61: expression ('*') ->  expression '*' expression
     {324, 3}, // 62: expression (DIV) ->  variable DIV expression
     {324, 3}, // 63: expression (DIV) ->  array_element DIV expression
     {324, 3}, // 64: expression ('/') ->  expression '/' expression
     {324, 3}, // 65: expression (MOD) ->  variable MOD expression
     {324, 3}, // 66: expression (MOD) ->  array_element MOD expression
     {324, 3}, // 67: expression (DIVMOD) ->  variable DIVMOD expression
     {324, 3}, // 68: expression (DIVMOD) ->  array_element DIVMOD expression
     {324, 3}, // 69: expression (MODDIV) ->  variable MODDIV expression
     {324, 3}, // 70: expression (MODDIV) ->  array_element MODDIV expression
     {324, 3}, // 71: expression ('%') ->  expression '%' expression
     {324, 3}, // 72: expression ('<') ->  expression '<' expression
     {324, 3}, // 73: expression ('>') ->  expression '>' expression
     {324, 3}, // 74: expression (LE) ->  expression LE expression
     {324, 3}, // 75: expression (GE) ->  expression GE expression
     {324, 3}, // 76: expression (NE) ->  expression NE expression
     {324, 3}, // 77: expression (EQ) ->  expression EQ expression
     {324, 2}, // 78: expression ('!') ->  '!' expression
     {324, 3}, // 79: expression (AND) ->  expression AND expression
     {324, 3}, // 80: expression (OR) ->  expression OR expression
     {325, 9}, // 81: for_statement (FOR) ->  FOR '(' expression ';' expression ';' expression ')' statement
     {326, 5}, // 82: if_statement (IF) ->  IF '(' expression ')' statement
     {326, 7}, // 83: if_statement (then) ->  IF '(' expression ')' statement ELSE statement
     {323, 5}, // 84: while_statement (WHILE) ->  WHILE '(' expression ')' statement
     {327, 2}, // 85: variable_declaration (LET) ->  LET variable_specification
     {328, 1}, // 86: variable_specification (IDENT) ->  IDENT
     {328, 3}, // 87: variable_specification ('[') ->  '[' ']' IDENT
     {328, 4}, // 88: variable_specification ('[') ->  '[' NUM ']' IDENT
     {328, 4}, // 89: variable_specification ('[') ->  '[' IDENT ']' IDENT
     {329, 1}, // 90: variable_specification_list ->  variable_specification
     {329, 3}, // 91: variable_specification_list (',') ->  variable_specification_list ',' variable_specification
     {330, 1}, // 92: variable (IDENT) ->  IDENT
     {331, 1}, // 93: constant_literal (NUM) ->  NUM
     {331, 1}, // 94: constant_literal (CHR) ->  CHR
     {332, 1}, // 95: expression_list ->  expression
     {332, 3}, // 96: expression_list (',') ->  expression_list ',' expression
     {333, 0}, // 97: optional_expression_list ->  <empty>
     {333, 1}, // 98: optional_expression_list ->  expression_list
     {334, 4}, // 99: array_element (IDENT) ->  IDENT '[' expression ']'
     {335, 1}, // 100: string_literal (STR) ->  STR
     {336, 4}, // 101: anonymous_array ('#') ->  '#' '(' expression_list ')'
     {336, 4}, // 102: anonymous_array ('#') ->  '#' '[' NUM ']'
     {336, 4}, // 103: anonymous_array ('#') ->  '#' '[' IDENT ']'
     {336, 6}, // 104: anonymous_array ('#') ->  '#' '[' NUM ',' expression ']'
     {336, 6}, // 105: anonymous_array ('#') ->  '#' '[' IDENT ',' expression ']'
     {337, 4}, // 106: function_call (IDENT) ->  IDENT '(' optional_expression_list ')'
     {338, 1}, // 107: program_$ ->  program
};

// State info and SR_ transitions for each state.


SR_ s_0[] =
{
    { { DEF_RED}, {  2} },           
    { {     311}, {  1} }, // program
    { {       0}, { -1} },           
};

SR_ s_1[] =
{
    { { ERR_REQ}, {      12} },                        
    { { errTok_}, {       2} }, // errTok_             
    { {     312}, {       3} }, // function_definition 
    { {     313}, {       4} }, // global_variable_list
    { {     314}, {       5} }, // include_directive   
    { {     315}, {       6} }, // const_definition    
    { {     316}, {       7} }, // function_header     
    { {     259}, {       8} }, // GLOBAL              
    { {     262}, {       9} }, // INCLUDE             
    { {     267}, {      10} }, // CONST               
    { {     258}, {      11} }, // FUNCTION            
    { {    EOF_}, { ACCEPT_} },                        
    { {       0}, {       0} },                        
};

SR_ s_2[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR_ s_3[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR_ s_4[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR_ s_5[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR_ s_6[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR_ s_7[] =
{
    { { REQ_TOKEN}, {  3} },               
    { {       317}, { 12} }, // scope_block
    { {       123}, { 13} }, // '{'        
    { {         0}, {  0} },               
};

SR_ s_8[] =
{
    { { REQ_TOKEN}, {  5} },                               
    { {       329}, { 14} }, // variable_specification_list
    { {       328}, { 15} }, // variable_specification     
    { {       286}, { 16} }, // IDENT                      
    { {        91}, { 17} }, // '['                        
    { {         0}, {  0} },                               
};

SR_ s_9[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       287}, { 18} }, // STR
    { {         0}, {  0} },       
};

SR_ s_10[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       286}, { 19} }, // IDENT
    { {         0}, {  0} },         
};

SR_ s_11[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       286}, { 20} }, // IDENT
    { {         0}, {  0} },         
};

SR_ s_12[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR_ s_13[] =
{
    { { DEF_RED}, {   2} },             
    { {     321}, {  21} }, // code_body
    { {       0}, { -21} },             
};

SR_ s_14[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        59}, { 22} }, // ';'
    { {        44}, { 23} }, // ','
    { {         0}, {  0} },       
};

SR_ s_15[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -90} }, 
};

SR_ s_16[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -86} }, 
};

SR_ s_17[] =
{
    { { REQ_TOKEN}, {  4} },         
    { {        93}, { 24} }, // ']'  
    { {       288}, { 25} }, // NUM  
    { {       286}, { 26} }, // IDENT
    { {         0}, {  0} },         
};

SR_ s_18[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR_ s_19[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        61}, { 27} }, // '='
    { {         0}, {  0} },       
};

SR_ s_20[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        40}, { 28} }, // '('
    { {        61}, { 29} }, // '='
    { {         0}, {  0} },       
};

SR_ s_21[] =
{
    { { ERR_REQ}, { 35} },                        
    { {     125}, { 30} }, // '}'                 
    { {     322}, { 31} }, // statement           
    { { errTok_}, { 32} }, // errTok_             
    { {      59}, { 33} }, // ';'                 
    { {     324}, { 34} }, // expression          
    { {     317}, { 35} }, // scope_block         
    { {     260}, { 36} }, // INLINE_BF           
    { {     261}, { 37} }, // MOVE_PTR            
    { {     325}, { 38} }, // for_statement       
    { {     326}, { 39} }, // if_statement        
    { {     323}, { 40} }, // while_statement     
    { {     327}, { 41} }, // variable_declaration
    { {     330}, { 42} }, // variable            
    { {      45}, { 43} }, // '-'                 
    { {     334}, { 44} }, // array_element       
    { {     331}, { 45} }, // constant_literal    
    { {     335}, { 46} }, // string_literal      
    { {     336}, { 47} }, // anonymous_array     
    { {     337}, { 48} }, // function_call       
    { {     263}, { 49} }, // SIZEOF              
    { {      40}, { 50} }, // '('                 
    { {     283}, { 51} }, // INC                 
    { {     284}, { 52} }, // DEC                 
    { {      33}, { 53} }, // '!'                 
    { {     123}, { 13} }, // '{'                 
    { {     264}, { 54} }, // FOR                 
    { {     265}, { 55} }, // IF                  
    { {     266}, { 56} }, // WHILE               
    { {     257}, { 57} }, // LET                 
    { {     286}, { 58} }, // IDENT               
    { {     288}, { 59} }, // NUM                 
    { {     289}, { 60} }, // CHR                 
    { {     287}, { 61} }, // STR                 
    { {      35}, { 62} }, // '#'                 
    { {       0}, {  0} },                        
};

SR_ s_22[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR_ s_23[] =
{
    { { REQ_TOKEN}, {  4} },                          
    { {       328}, { 63} }, // variable_specification
    { {       286}, { 16} }, // IDENT                 
    { {        91}, { 17} }, // '['                   
    { {         0}, {  0} },                          
};

SR_ s_24[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       286}, { 64} }, // IDENT
    { {         0}, {  0} },         
};

SR_ s_25[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        93}, { 65} }, // ']'
    { {         0}, {  0} },       
};

SR_ s_26[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        93}, { 66} }, // ']'
    { {         0}, {  0} },       
};

SR_ s_27[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {       288}, { 67} }, // NUM
    { {       289}, { 68} }, // CHR
    { {         0}, {  0} },       
};

SR_ s_28[] =
{
    { { REQ_DEF}, {   6} },                           
    { {     320}, {  69} }, // optional_parameter_list
    { {     319}, {  70} }, // parameter_list         
    { {     318}, {  71} }, // parameter              
    { {     286}, {  72} }, // IDENT                  
    { {      38}, {  73} }, // '&'                    
    { {       0}, { -19} },                           
};

SR_ s_29[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       286}, { 74} }, // IDENT
    { {         0}, {  0} },         
};

SR_ s_30[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR_ s_31[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR_ s_32[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 75} }, // ';'
    { {         0}, {  0} },       
};

SR_ s_33[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR_ s_34[] =
{
    { { REQ_TOKEN}, { 15} },       
    { {        59}, { 76} }, // ';'
    { {        43}, { 77} }, // '+'
    { {        45}, { 78} }, // '-'
    { {        42}, { 79} }, // '*'
    { {        47}, { 80} }, // '/'
    { {        37}, { 81} }, // '%'
    { {        60}, { 82} }, // '<'
    { {        62}, { 83} }, // '>'
    { {       279}, { 84} }, // LE 
    { {       280}, { 85} }, // GE 
    { {       282}, { 86} }, // NE 
    { {       281}, { 87} }, // EQ 
    { {       277}, { 88} }, // AND
    { {       278}, { 89} }, // OR 
    { {         0}, {  0} },       
};

SR_ s_35[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR_ s_36[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 90} }, // '('
    { {         0}, {  0} },       
};

SR_ s_37[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 91} }, // '('
    { {         0}, {  0} },       
};

SR_ s_38[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR_ s_39[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR_ s_40[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR_ s_41[] =
{
    { { REQ_DEF}, {   2} },       
    { {      61}, {  92} }, // '='
    { {       0}, { -32} },       
};

SR_ s_42[] =
{
    { { REQ_DEF}, {  11} },          
    { {      61}, {  93} }, // '='   
    { {     283}, {  94} }, // INC   
    { {     284}, {  95} }, // DEC   
    { {     270}, {  96} }, // ADD   
    { {     271}, {  97} }, // SUB   
    { {     272}, {  98} }, // MUL   
    { {     274}, {  99} }, // DIV   
    { {     273}, { 100} }, // MOD   
    { {     275}, { 101} }, // DIVMOD
    { {     276}, { 102} }, // MODDIV
    { {       0}, { -33} },          
};

SR_ s_43[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 103} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_44[] =
{
    { { REQ_DEF}, {  11} },          
    { {      61}, { 104} }, // '='   
    { {     283}, { 105} }, // INC   
    { {     284}, { 106} }, // DEC   
    { {     270}, { 107} }, // ADD   
    { {     271}, { 108} }, // SUB   
    { {     272}, { 109} }, // MUL   
    { {     274}, { 110} }, // DIV   
    { {     273}, { 111} }, // MOD   
    { {     275}, { 112} }, // DIVMOD
    { {     276}, { 113} }, // MODDIV
    { {       0}, { -35} },          
};

SR_ s_45[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR_ s_46[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR_ s_47[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR_ s_48[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -39} }, 
};

SR_ s_49[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 114} }, // '('
    { {         0}, {   0} },       
};

SR_ s_50[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 115} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_51[] =
{
    { { REQ_TOKEN}, {   4} },                 
    { {       330}, { 116} }, // variable     
    { {       334}, { 117} }, // array_element
    { {       286}, { 118} }, // IDENT        
    { {         0}, {   0} },                 
};

SR_ s_52[] =
{
    { { REQ_TOKEN}, {   4} },                 
    { {       330}, { 119} }, // variable     
    { {       334}, { 120} }, // array_element
    { {       286}, { 118} }, // IDENT        
    { {         0}, {   0} },                 
};

SR_ s_53[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 121} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_54[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 122} }, // '('
    { {         0}, {   0} },       
};

SR_ s_55[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 123} }, // '('
    { {         0}, {   0} },       
};

SR_ s_56[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 124} }, // '('
    { {         0}, {   0} },       
};

SR_ s_57[] =
{
    { { REQ_TOKEN}, {   4} },                          
    { {       328}, { 125} }, // variable_specification
    { {       286}, {  16} }, // IDENT                 
    { {        91}, {  17} }, // '['                   
    { {         0}, {   0} },                          
};

SR_ s_58[] =
{
    { { REQ_DEF}, {   3} },       
    { {      91}, { 126} }, // '['
    { {      40}, { 127} }, // '('
    { {       0}, { -92} },       
};

SR_ s_59[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -93} }, 
};

SR_ s_60[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -94} }, 
};

SR_ s_61[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -100} }, 
};

SR_ s_62[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        40}, { 128} }, // '('
    { {        91}, { 129} }, // '['
    { {         0}, {   0} },       
};

SR_ s_63[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -91} }, 
};

SR_ s_64[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -87} }, 
};

SR_ s_65[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       286}, { 130} }, // IDENT
    { {         0}, {   0} },         
};

SR_ s_66[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       286}, { 131} }, // IDENT
    { {         0}, {   0} },         
};

SR_ s_67[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 132} }, // ';'
    { {         0}, {   0} },       
};

SR_ s_68[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 133} }, // ';'
    { {         0}, {   0} },       
};

SR_ s_69[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 134} }, // ')'
    { {         0}, {   0} },       
};

SR_ s_70[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, { 135} }, // ','
    { {       0}, { -18} },       
};

SR_ s_71[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR_ s_72[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR_ s_73[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       286}, { 136} }, // IDENT
    { {         0}, {   0} },         
};

SR_ s_74[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 137} }, // '('
    { {         0}, {   0} },       
};

SR_ s_75[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR_ s_76[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR_ s_77[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 138} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_78[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 139} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_79[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 140} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_80[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 141} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_81[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 142} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_82[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 143} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_83[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 144} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_84[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 145} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_85[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 146} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_86[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 147} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_87[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 148} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_88[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 149} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_89[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 150} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_90[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {       287}, { 151} }, // STR
    { {         0}, {   0} },       
};

SR_ s_91[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       286}, { 152} }, // IDENT
    { {         0}, {   0} },         
};

SR_ s_92[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 153} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_93[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 154} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_94[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -47} }, 
};

SR_ s_95[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -48} }, 
};

SR_ s_96[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 155} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_97[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 156} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_98[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 157} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_99[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 158} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_100[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 159} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_101[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 160} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_102[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 161} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_103[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -34} }, 
};

SR_ s_104[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 162} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_105[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR_ s_106[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -52} }, 
};

SR_ s_107[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 163} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_108[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 164} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_109[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 165} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_110[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 166} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_111[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 167} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_112[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 168} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_113[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 169} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_114[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       286}, { 170} }, // IDENT
    { {         0}, {   0} },         
};

SR_ s_115[] =
{
    { { REQ_TOKEN}, {  15} },       
    { {        41}, { 171} }, // ')'
    { {        43}, {  77} }, // '+'
    { {        45}, {  78} }, // '-'
    { {        42}, {  79} }, // '*'
    { {        47}, {  80} }, // '/'
    { {        37}, {  81} }, // '%'
    { {        60}, {  82} }, // '<'
    { {        62}, {  83} }, // '>'
    { {       279}, {  84} }, // LE 
    { {       280}, {  85} }, // GE 
    { {       282}, {  86} }, // NE 
    { {       281}, {  87} }, // EQ 
    { {       277}, {  88} }, // AND
    { {       278}, {  89} }, // OR 
    { {         0}, {   0} },       
};

SR_ s_116[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -45} }, 
};

SR_ s_117[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -49} }, 
};

SR_ s_118[] =
{
    { { REQ_DEF}, {   2} },       
    { {      91}, { 126} }, // '['
    { {       0}, { -92} },       
};

SR_ s_119[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -46} }, 
};

SR_ s_120[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -50} }, 
};

SR_ s_121[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -78} }, 
};

SR_ s_122[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 172} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_123[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 173} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_124[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 174} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_125[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -85} }, 
};

SR_ s_126[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 175} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_127[] =
{
    { { REQ_DEF}, {  23} },                            
    { {     333}, { 176} }, // optional_expression_list
    { {     332}, { 177} }, // expression_list         
    { {     324}, { 178} }, // expression              
    { {     327}, {  41} }, // variable_declaration    
    { {     330}, {  42} }, // variable                
    { {      45}, {  43} }, // '-'                     
    { {     334}, {  44} }, // array_element           
    { {     331}, {  45} }, // constant_literal        
    { {     335}, {  46} }, // string_literal          
    { {     336}, {  47} }, // anonymous_array         
    { {     337}, {  48} }, // function_call           
    { {     263}, {  49} }, // SIZEOF                  
    { {      40}, {  50} }, // '('                     
    { {     283}, {  51} }, // INC                     
    { {     284}, {  52} }, // DEC                     
    { {      33}, {  53} }, // '!'                     
    { {     257}, {  57} }, // LET                     
    { {     286}, {  58} }, // IDENT                   
    { {     288}, {  59} }, // NUM                     
    { {     289}, {  60} }, // CHR                     
    { {     287}, {  61} }, // STR                     
    { {      35}, {  62} }, // '#'                     
    { {       0}, { -97} },                            
};

SR_ s_128[] =
{
    { { REQ_TOKEN}, {  22} },                        
    { {       332}, { 179} }, // expression_list     
    { {       324}, { 178} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_129[] =
{
    { { REQ_TOKEN}, {   3} },         
    { {       288}, { 180} }, // NUM  
    { {       286}, { 181} }, // IDENT
    { {         0}, {   0} },         
};

SR_ s_130[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -88} }, 
};

SR_ s_131[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -89} }, 
};

SR_ s_132[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR_ s_133[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR_ s_134[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR_ s_135[] =
{
    { { REQ_TOKEN}, {   4} },             
    { {       318}, { 182} }, // parameter
    { {       286}, {  72} }, // IDENT    
    { {        38}, {  73} }, // '&'      
    { {         0}, {   0} },             
};

SR_ s_136[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR_ s_137[] =
{
    { { REQ_DEF}, {   6} },                           
    { {     320}, { 183} }, // optional_parameter_list
    { {     319}, {  70} }, // parameter_list         
    { {     318}, {  71} }, // parameter              
    { {     286}, {  72} }, // IDENT                  
    { {      38}, {  73} }, // '&'                    
    { {       0}, { -19} },                           
};

SR_ s_138[] =
{
    { { REQ_DEF}, {   4} },       
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {       0}, { -55} },       
};

SR_ s_139[] =
{
    { { REQ_DEF}, {   4} },       
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {       0}, { -58} },       
};

SR_ s_140[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -61} }, 
};

SR_ s_141[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -64} }, 
};

SR_ s_142[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -71} }, 
};

SR_ s_143[] =
{
    { { REQ_DEF}, {   6} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {       0}, { -72} },       
};

SR_ s_144[] =
{
    { { REQ_DEF}, {   6} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {       0}, { -73} },       
};

SR_ s_145[] =
{
    { { REQ_DEF}, {   6} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {       0}, { -74} },       
};

SR_ s_146[] =
{
    { { REQ_DEF}, {   6} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {       0}, { -75} },       
};

SR_ s_147[] =
{
    { { REQ_DEF}, {   6} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {       0}, { -76} },       
};

SR_ s_148[] =
{
    { { REQ_DEF}, {   6} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {       0}, { -77} },       
};

SR_ s_149[] =
{
    { { REQ_DEF}, {  14} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {      60}, {  82} }, // '<'
    { {      62}, {  83} }, // '>'
    { {     279}, {  84} }, // LE 
    { {     280}, {  85} }, // GE 
    { {     282}, {  86} }, // NE 
    { {     281}, {  87} }, // EQ 
    { {     277}, {  88} }, // AND
    { {     278}, {  89} }, // OR 
    { {       0}, { -79} },       
};

SR_ s_150[] =
{
    { { REQ_DEF}, {  14} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {      60}, {  82} }, // '<'
    { {      62}, {  83} }, // '>'
    { {     279}, {  84} }, // LE 
    { {     280}, {  85} }, // GE 
    { {     282}, {  86} }, // NE 
    { {     281}, {  87} }, // EQ 
    { {     277}, {  88} }, // AND
    { {     278}, {  89} }, // OR 
    { {       0}, { -80} },       
};

SR_ s_151[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 184} }, // ')'
    { {         0}, {   0} },       
};

SR_ s_152[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 185} }, // ')'
    { {         0}, {   0} },       
};

SR_ s_153[] =
{
    { { REQ_DEF}, {  14} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {      60}, {  82} }, // '<'
    { {      62}, {  83} }, // '>'
    { {     279}, {  84} }, // LE 
    { {     280}, {  85} }, // GE 
    { {     282}, {  86} }, // NE 
    { {     281}, {  87} }, // EQ 
    { {     277}, {  88} }, // AND
    { {     278}, {  89} }, // OR 
    { {       0}, { -41} },       
};

SR_ s_154[] =
{
    { { REQ_DEF}, {  14} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {      60}, {  82} }, // '<'
    { {      62}, {  83} }, // '>'
    { {     279}, {  84} }, // LE 
    { {     280}, {  85} }, // GE 
    { {     282}, {  86} }, // NE 
    { {     281}, {  87} }, // EQ 
    { {     277}, {  88} }, // AND
    { {     278}, {  89} }, // OR 
    { {       0}, { -42} },       
};

SR_ s_155[] =
{
    { { REQ_DEF}, {  14} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {      60}, {  82} }, // '<'
    { {      62}, {  83} }, // '>'
    { {     279}, {  84} }, // LE 
    { {     280}, {  85} }, // GE 
    { {     282}, {  86} }, // NE 
    { {     281}, {  87} }, // EQ 
    { {     277}, {  88} }, // AND
    { {     278}, {  89} }, // OR 
    { {       0}, { -53} },       
};

SR_ s_156[] =
{
    { { REQ_DEF}, {  14} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {      60}, {  82} }, // '<'
    { {      62}, {  83} }, // '>'
    { {     279}, {  84} }, // LE 
    { {     280}, {  85} }, // GE 
    { {     282}, {  86} }, // NE 
    { {     281}, {  87} }, // EQ 
    { {     277}, {  88} }, // AND
    { {     278}, {  89} }, // OR 
    { {       0}, { -56} },       
};

SR_ s_157[] =
{
    { { REQ_DEF}, {  14} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {      60}, {  82} }, // '<'
    { {      62}, {  83} }, // '>'
    { {     279}, {  84} }, // LE 
    { {     280}, {  85} }, // GE 
    { {     282}, {  86} }, // NE 
    { {     281}, {  87} }, // EQ 
    { {     277}, {  88} }, // AND
    { {     278}, {  89} }, // OR 
    { {       0}, { -59} },       
};

SR_ s_158[] =
{
    { { REQ_DEF}, {  14} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {      60}, {  82} }, // '<'
    { {      62}, {  83} }, // '>'
    { {     279}, {  84} }, // LE 
    { {     280}, {  85} }, // GE 
    { {     282}, {  86} }, // NE 
    { {     281}, {  87} }, // EQ 
    { {     277}, {  88} }, // AND
    { {     278}, {  89} }, // OR 
    { {       0}, { -62} },       
};

SR_ s_159[] =
{
    { { REQ_DEF}, {  14} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {      60}, {  82} }, // '<'
    { {      62}, {  83} }, // '>'
    { {     279}, {  84} }, // LE 
    { {     280}, {  85} }, // GE 
    { {     282}, {  86} }, // NE 
    { {     281}, {  87} }, // EQ 
    { {     277}, {  88} }, // AND
    { {     278}, {  89} }, // OR 
    { {       0}, { -65} },       
};

SR_ s_160[] =
{
    { { REQ_DEF}, {  14} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {      60}, {  82} }, // '<'
    { {      62}, {  83} }, // '>'
    { {     279}, {  84} }, // LE 
    { {     280}, {  85} }, // GE 
    { {     282}, {  86} }, // NE 
    { {     281}, {  87} }, // EQ 
    { {     277}, {  88} }, // AND
    { {     278}, {  89} }, // OR 
    { {       0}, { -67} },       
};

SR_ s_161[] =
{
    { { REQ_DEF}, {  14} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {      60}, {  82} }, // '<'
    { {      62}, {  83} }, // '>'
    { {     279}, {  84} }, // LE 
    { {     280}, {  85} }, // GE 
    { {     282}, {  86} }, // NE 
    { {     281}, {  87} }, // EQ 
    { {     277}, {  88} }, // AND
    { {     278}, {  89} }, // OR 
    { {       0}, { -69} },       
};

SR_ s_162[] =
{
    { { REQ_DEF}, {  14} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {      60}, {  82} }, // '<'
    { {      62}, {  83} }, // '>'
    { {     279}, {  84} }, // LE 
    { {     280}, {  85} }, // GE 
    { {     282}, {  86} }, // NE 
    { {     281}, {  87} }, // EQ 
    { {     277}, {  88} }, // AND
    { {     278}, {  89} }, // OR 
    { {       0}, { -43} },       
};

SR_ s_163[] =
{
    { { REQ_DEF}, {  14} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {      60}, {  82} }, // '<'
    { {      62}, {  83} }, // '>'
    { {     279}, {  84} }, // LE 
    { {     280}, {  85} }, // GE 
    { {     282}, {  86} }, // NE 
    { {     281}, {  87} }, // EQ 
    { {     277}, {  88} }, // AND
    { {     278}, {  89} }, // OR 
    { {       0}, { -54} },       
};

SR_ s_164[] =
{
    { { REQ_DEF}, {  14} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {      60}, {  82} }, // '<'
    { {      62}, {  83} }, // '>'
    { {     279}, {  84} }, // LE 
    { {     280}, {  85} }, // GE 
    { {     282}, {  86} }, // NE 
    { {     281}, {  87} }, // EQ 
    { {     277}, {  88} }, // AND
    { {     278}, {  89} }, // OR 
    { {       0}, { -57} },       
};

SR_ s_165[] =
{
    { { REQ_DEF}, {  14} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {      60}, {  82} }, // '<'
    { {      62}, {  83} }, // '>'
    { {     279}, {  84} }, // LE 
    { {     280}, {  85} }, // GE 
    { {     282}, {  86} }, // NE 
    { {     281}, {  87} }, // EQ 
    { {     277}, {  88} }, // AND
    { {     278}, {  89} }, // OR 
    { {       0}, { -60} },       
};

SR_ s_166[] =
{
    { { REQ_DEF}, {  14} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {      60}, {  82} }, // '<'
    { {      62}, {  83} }, // '>'
    { {     279}, {  84} }, // LE 
    { {     280}, {  85} }, // GE 
    { {     282}, {  86} }, // NE 
    { {     281}, {  87} }, // EQ 
    { {     277}, {  88} }, // AND
    { {     278}, {  89} }, // OR 
    { {       0}, { -63} },       
};

SR_ s_167[] =
{
    { { REQ_DEF}, {  14} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {      60}, {  82} }, // '<'
    { {      62}, {  83} }, // '>'
    { {     279}, {  84} }, // LE 
    { {     280}, {  85} }, // GE 
    { {     282}, {  86} }, // NE 
    { {     281}, {  87} }, // EQ 
    { {     277}, {  88} }, // AND
    { {     278}, {  89} }, // OR 
    { {       0}, { -66} },       
};

SR_ s_168[] =
{
    { { REQ_DEF}, {  14} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {      60}, {  82} }, // '<'
    { {      62}, {  83} }, // '>'
    { {     279}, {  84} }, // LE 
    { {     280}, {  85} }, // GE 
    { {     282}, {  86} }, // NE 
    { {     281}, {  87} }, // EQ 
    { {     277}, {  88} }, // AND
    { {     278}, {  89} }, // OR 
    { {       0}, { -68} },       
};

SR_ s_169[] =
{
    { { REQ_DEF}, {  14} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {      60}, {  82} }, // '<'
    { {      62}, {  83} }, // '>'
    { {     279}, {  84} }, // LE 
    { {     280}, {  85} }, // GE 
    { {     282}, {  86} }, // NE 
    { {     281}, {  87} }, // EQ 
    { {     277}, {  88} }, // AND
    { {     278}, {  89} }, // OR 
    { {       0}, { -70} },       
};

SR_ s_170[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 186} }, // ')'
    { {         0}, {   0} },       
};

SR_ s_171[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -44} }, 
};

SR_ s_172[] =
{
    { { REQ_TOKEN}, {  15} },       
    { {        59}, { 187} }, // ';'
    { {        43}, {  77} }, // '+'
    { {        45}, {  78} }, // '-'
    { {        42}, {  79} }, // '*'
    { {        47}, {  80} }, // '/'
    { {        37}, {  81} }, // '%'
    { {        60}, {  82} }, // '<'
    { {        62}, {  83} }, // '>'
    { {       279}, {  84} }, // LE 
    { {       280}, {  85} }, // GE 
    { {       282}, {  86} }, // NE 
    { {       281}, {  87} }, // EQ 
    { {       277}, {  88} }, // AND
    { {       278}, {  89} }, // OR 
    { {         0}, {   0} },       
};

SR_ s_173[] =
{
    { { REQ_TOKEN}, {  15} },       
    { {        41}, { 188} }, // ')'
    { {        43}, {  77} }, // '+'
    { {        45}, {  78} }, // '-'
    { {        42}, {  79} }, // '*'
    { {        47}, {  80} }, // '/'
    { {        37}, {  81} }, // '%'
    { {        60}, {  82} }, // '<'
    { {        62}, {  83} }, // '>'
    { {       279}, {  84} }, // LE 
    { {       280}, {  85} }, // GE 
    { {       282}, {  86} }, // NE 
    { {       281}, {  87} }, // EQ 
    { {       277}, {  88} }, // AND
    { {       278}, {  89} }, // OR 
    { {         0}, {   0} },       
};

SR_ s_174[] =
{
    { { REQ_TOKEN}, {  15} },       
    { {        41}, { 189} }, // ')'
    { {        43}, {  77} }, // '+'
    { {        45}, {  78} }, // '-'
    { {        42}, {  79} }, // '*'
    { {        47}, {  80} }, // '/'
    { {        37}, {  81} }, // '%'
    { {        60}, {  82} }, // '<'
    { {        62}, {  83} }, // '>'
    { {       279}, {  84} }, // LE 
    { {       280}, {  85} }, // GE 
    { {       282}, {  86} }, // NE 
    { {       281}, {  87} }, // EQ 
    { {       277}, {  88} }, // AND
    { {       278}, {  89} }, // OR 
    { {         0}, {   0} },       
};

SR_ s_175[] =
{
    { { REQ_TOKEN}, {  15} },       
    { {        93}, { 190} }, // ']'
    { {        43}, {  77} }, // '+'
    { {        45}, {  78} }, // '-'
    { {        42}, {  79} }, // '*'
    { {        47}, {  80} }, // '/'
    { {        37}, {  81} }, // '%'
    { {        60}, {  82} }, // '<'
    { {        62}, {  83} }, // '>'
    { {       279}, {  84} }, // LE 
    { {       280}, {  85} }, // GE 
    { {       282}, {  86} }, // NE 
    { {       281}, {  87} }, // EQ 
    { {       277}, {  88} }, // AND
    { {       278}, {  89} }, // OR 
    { {         0}, {   0} },       
};

SR_ s_176[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 191} }, // ')'
    { {         0}, {   0} },       
};

SR_ s_177[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, { 192} }, // ','
    { {       0}, { -98} },       
};

SR_ s_178[] =
{
    { { REQ_DEF}, {  14} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {      60}, {  82} }, // '<'
    { {      62}, {  83} }, // '>'
    { {     279}, {  84} }, // LE 
    { {     280}, {  85} }, // GE 
    { {     282}, {  86} }, // NE 
    { {     281}, {  87} }, // EQ 
    { {     277}, {  88} }, // AND
    { {     278}, {  89} }, // OR 
    { {       0}, { -95} },       
};

SR_ s_179[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 193} }, // ')'
    { {        44}, { 192} }, // ','
    { {         0}, {   0} },       
};

SR_ s_180[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        93}, { 194} }, // ']'
    { {        44}, { 195} }, // ','
    { {         0}, {   0} },       
};

SR_ s_181[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        93}, { 196} }, // ']'
    { {        44}, { 197} }, // ','
    { {         0}, {   0} },       
};

SR_ s_182[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR_ s_183[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 198} }, // ')'
    { {         0}, {   0} },       
};

SR_ s_184[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 199} }, // ';'
    { {         0}, {   0} },       
};

SR_ s_185[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 200} }, // ';'
    { {         0}, {   0} },       
};

SR_ s_186[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR_ s_187[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 201} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_188[] =
{
    { { ERR_REQ}, {  34} },                        
    { {     322}, { 202} }, // statement           
    { { errTok_}, {  32} }, // errTok_             
    { {      59}, {  33} }, // ';'                 
    { {     324}, {  34} }, // expression          
    { {     317}, {  35} }, // scope_block         
    { {     260}, {  36} }, // INLINE_BF           
    { {     261}, {  37} }, // MOVE_PTR            
    { {     325}, {  38} }, // for_statement       
    { {     326}, {  39} }, // if_statement        
    { {     323}, {  40} }, // while_statement     
    { {     327}, {  41} }, // variable_declaration
    { {     330}, {  42} }, // variable            
    { {      45}, {  43} }, // '-'                 
    { {     334}, {  44} }, // array_element       
    { {     331}, {  45} }, // constant_literal    
    { {     335}, {  46} }, // string_literal      
    { {     336}, {  47} }, // anonymous_array     
    { {     337}, {  48} }, // function_call       
    { {     263}, {  49} }, // SIZEOF              
    { {      40}, {  50} }, // '('                 
    { {     283}, {  51} }, // INC                 
    { {     284}, {  52} }, // DEC                 
    { {      33}, {  53} }, // '!'                 
    { {     123}, {  13} }, // '{'                 
    { {     264}, {  54} }, // FOR                 
    { {     265}, {  55} }, // IF                  
    { {     266}, {  56} }, // WHILE               
    { {     257}, {  57} }, // LET                 
    { {     286}, {  58} }, // IDENT               
    { {     288}, {  59} }, // NUM                 
    { {     289}, {  60} }, // CHR                 
    { {     287}, {  61} }, // STR                 
    { {      35}, {  62} }, // '#'                 
    { {       0}, {   0} },                        
};

SR_ s_189[] =
{
    { { ERR_REQ}, {  34} },                        
    { {     322}, { 203} }, // statement           
    { { errTok_}, {  32} }, // errTok_             
    { {      59}, {  33} }, // ';'                 
    { {     324}, {  34} }, // expression          
    { {     317}, {  35} }, // scope_block         
    { {     260}, {  36} }, // INLINE_BF           
    { {     261}, {  37} }, // MOVE_PTR            
    { {     325}, {  38} }, // for_statement       
    { {     326}, {  39} }, // if_statement        
    { {     323}, {  40} }, // while_statement     
    { {     327}, {  41} }, // variable_declaration
    { {     330}, {  42} }, // variable            
    { {      45}, {  43} }, // '-'                 
    { {     334}, {  44} }, // array_element       
    { {     331}, {  45} }, // constant_literal    
    { {     335}, {  46} }, // string_literal      
    { {     336}, {  47} }, // anonymous_array     
    { {     337}, {  48} }, // function_call       
    { {     263}, {  49} }, // SIZEOF              
    { {      40}, {  50} }, // '('                 
    { {     283}, {  51} }, // INC                 
    { {     284}, {  52} }, // DEC                 
    { {      33}, {  53} }, // '!'                 
    { {     123}, {  13} }, // '{'                 
    { {     264}, {  54} }, // FOR                 
    { {     265}, {  55} }, // IF                  
    { {     266}, {  56} }, // WHILE               
    { {     257}, {  57} }, // LET                 
    { {     286}, {  58} }, // IDENT               
    { {     288}, {  59} }, // NUM                 
    { {     289}, {  60} }, // CHR                 
    { {     287}, {  61} }, // STR                 
    { {      35}, {  62} }, // '#'                 
    { {       0}, {   0} },                        
};

SR_ s_190[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -99} }, 
};

SR_ s_191[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -106} }, 
};

SR_ s_192[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 204} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_193[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -101} }, 
};

SR_ s_194[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -102} }, 
};

SR_ s_195[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 205} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_196[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -103} }, 
};

SR_ s_197[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 206} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_198[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR_ s_199[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR_ s_200[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR_ s_201[] =
{
    { { REQ_TOKEN}, {  15} },       
    { {        59}, { 207} }, // ';'
    { {        43}, {  77} }, // '+'
    { {        45}, {  78} }, // '-'
    { {        42}, {  79} }, // '*'
    { {        47}, {  80} }, // '/'
    { {        37}, {  81} }, // '%'
    { {        60}, {  82} }, // '<'
    { {        62}, {  83} }, // '>'
    { {       279}, {  84} }, // LE 
    { {       280}, {  85} }, // GE 
    { {       282}, {  86} }, // NE 
    { {       281}, {  87} }, // EQ 
    { {       277}, {  88} }, // AND
    { {       278}, {  89} }, // OR 
    { {         0}, {   0} },       
};

SR_ s_202[] =
{
    { { REQ_DEF}, {   2} },        
    { {     269}, { 208} }, // ELSE
    { {       0}, { -82} },        
};

SR_ s_203[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -84} }, 
};

SR_ s_204[] =
{
    { { REQ_DEF}, {  14} },       
    { {      43}, {  77} }, // '+'
    { {      45}, {  78} }, // '-'
    { {      42}, {  79} }, // '*'
    { {      47}, {  80} }, // '/'
    { {      37}, {  81} }, // '%'
    { {      60}, {  82} }, // '<'
    { {      62}, {  83} }, // '>'
    { {     279}, {  84} }, // LE 
    { {     280}, {  85} }, // GE 
    { {     282}, {  86} }, // NE 
    { {     281}, {  87} }, // EQ 
    { {     277}, {  88} }, // AND
    { {     278}, {  89} }, // OR 
    { {       0}, { -96} },       
};

SR_ s_205[] =
{
    { { REQ_TOKEN}, {  15} },       
    { {        93}, { 209} }, // ']'
    { {        43}, {  77} }, // '+'
    { {        45}, {  78} }, // '-'
    { {        42}, {  79} }, // '*'
    { {        47}, {  80} }, // '/'
    { {        37}, {  81} }, // '%'
    { {        60}, {  82} }, // '<'
    { {        62}, {  83} }, // '>'
    { {       279}, {  84} }, // LE 
    { {       280}, {  85} }, // GE 
    { {       282}, {  86} }, // NE 
    { {       281}, {  87} }, // EQ 
    { {       277}, {  88} }, // AND
    { {       278}, {  89} }, // OR 
    { {         0}, {   0} },       
};

SR_ s_206[] =
{
    { { REQ_TOKEN}, {  15} },       
    { {        93}, { 210} }, // ']'
    { {        43}, {  77} }, // '+'
    { {        45}, {  78} }, // '-'
    { {        42}, {  79} }, // '*'
    { {        47}, {  80} }, // '/'
    { {        37}, {  81} }, // '%'
    { {        60}, {  82} }, // '<'
    { {        62}, {  83} }, // '>'
    { {       279}, {  84} }, // LE 
    { {       280}, {  85} }, // GE 
    { {       282}, {  86} }, // NE 
    { {       281}, {  87} }, // EQ 
    { {       277}, {  88} }, // AND
    { {       278}, {  89} }, // OR 
    { {         0}, {   0} },       
};

SR_ s_207[] =
{
    { { REQ_TOKEN}, {  21} },                        
    { {       324}, { 211} }, // expression          
    { {       327}, {  41} }, // variable_declaration
    { {       330}, {  42} }, // variable            
    { {        45}, {  43} }, // '-'                 
    { {       334}, {  44} }, // array_element       
    { {       331}, {  45} }, // constant_literal    
    { {       335}, {  46} }, // string_literal      
    { {       336}, {  47} }, // anonymous_array     
    { {       337}, {  48} }, // function_call       
    { {       263}, {  49} }, // SIZEOF              
    { {        40}, {  50} }, // '('                 
    { {       283}, {  51} }, // INC                 
    { {       284}, {  52} }, // DEC                 
    { {        33}, {  53} }, // '!'                 
    { {       257}, {  57} }, // LET                 
    { {       286}, {  58} }, // IDENT               
    { {       288}, {  59} }, // NUM                 
    { {       289}, {  60} }, // CHR                 
    { {       287}, {  61} }, // STR                 
    { {        35}, {  62} }, // '#'                 
    { {         0}, {   0} },                        
};

SR_ s_208[] =
{
    { { ERR_REQ}, {  34} },                        
    { {     322}, { 212} }, // statement           
    { { errTok_}, {  32} }, // errTok_             
    { {      59}, {  33} }, // ';'                 
    { {     324}, {  34} }, // expression          
    { {     317}, {  35} }, // scope_block         
    { {     260}, {  36} }, // INLINE_BF           
    { {     261}, {  37} }, // MOVE_PTR            
    { {     325}, {  38} }, // for_statement       
    { {     326}, {  39} }, // if_statement        
    { {     323}, {  40} }, // while_statement     
    { {     327}, {  41} }, // variable_declaration
    { {     330}, {  42} }, // variable            
    { {      45}, {  43} }, // '-'                 
    { {     334}, {  44} }, // array_element       
    { {     331}, {  45} }, // constant_literal    
    { {     335}, {  46} }, // string_literal      
    { {     336}, {  47} }, // anonymous_array     
    { {     337}, {  48} }, // function_call       
    { {     263}, {  49} }, // SIZEOF              
    { {      40}, {  50} }, // '('                 
    { {     283}, {  51} }, // INC                 
    { {     284}, {  52} }, // DEC                 
    { {      33}, {  53} }, // '!'                 
    { {     123}, {  13} }, // '{'                 
    { {     264}, {  54} }, // FOR                 
    { {     265}, {  55} }, // IF                  
    { {     266}, {  56} }, // WHILE               
    { {     257}, {  57} }, // LET                 
    { {     286}, {  58} }, // IDENT               
    { {     288}, {  59} }, // NUM                 
    { {     289}, {  60} }, // CHR                 
    { {     287}, {  61} }, // STR                 
    { {      35}, {  62} }, // '#'                 
    { {       0}, {   0} },                        
};

SR_ s_209[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -104} }, 
};

SR_ s_210[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -105} }, 
};

SR_ s_211[] =
{
    { { REQ_TOKEN}, {  15} },       
    { {        41}, { 213} }, // ')'
    { {        43}, {  77} }, // '+'
    { {        45}, {  78} }, // '-'
    { {        42}, {  79} }, // '*'
    { {        47}, {  80} }, // '/'
    { {        37}, {  81} }, // '%'
    { {        60}, {  82} }, // '<'
    { {        62}, {  83} }, // '>'
    { {       279}, {  84} }, // LE 
    { {       280}, {  85} }, // GE 
    { {       282}, {  86} }, // NE 
    { {       281}, {  87} }, // EQ 
    { {       277}, {  88} }, // AND
    { {       278}, {  89} }, // OR 
    { {         0}, {   0} },       
};

SR_ s_212[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -83} }, 
};

SR_ s_213[] =
{
    { { ERR_REQ}, {  34} },                        
    { {     322}, { 214} }, // statement           
    { { errTok_}, {  32} }, // errTok_             
    { {      59}, {  33} }, // ';'                 
    { {     324}, {  34} }, // expression          
    { {     317}, {  35} }, // scope_block         
    { {     260}, {  36} }, // INLINE_BF           
    { {     261}, {  37} }, // MOVE_PTR            
    { {     325}, {  38} }, // for_statement       
    { {     326}, {  39} }, // if_statement        
    { {     323}, {  40} }, // while_statement     
    { {     327}, {  41} }, // variable_declaration
    { {     330}, {  42} }, // variable            
    { {      45}, {  43} }, // '-'                 
    { {     334}, {  44} }, // array_element       
    { {     331}, {  45} }, // constant_literal    
    { {     335}, {  46} }, // string_literal      
    { {     336}, {  47} }, // anonymous_array     
    { {     337}, {  48} }, // function_call       
    { {     263}, {  49} }, // SIZEOF              
    { {      40}, {  50} }, // '('                 
    { {     283}, {  51} }, // INC                 
    { {     284}, {  52} }, // DEC                 
    { {      33}, {  53} }, // '!'                 
    { {     123}, {  13} }, // '{'                 
    { {     264}, {  54} }, // FOR                 
    { {     265}, {  55} }, // IF                  
    { {     266}, {  56} }, // WHILE               
    { {     257}, {  57} }, // LET                 
    { {     286}, {  58} }, // IDENT               
    { {     288}, {  59} }, // NUM                 
    { {     289}, {  60} }, // CHR                 
    { {     287}, {  61} }, // STR                 
    { {      35}, {  62} }, // '#'                 
    { {       0}, {   0} },                        
};

SR_ s_214[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -81} }, 
};


// State array:
SR_ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,  s_146,  s_147,  s_148,  s_149,
  s_150,  s_151,  s_152,  s_153,  s_154,  s_155,  s_156,  s_157,  s_158,  s_159,
  s_160,  s_161,  s_162,  s_163,  s_164,  s_165,  s_166,  s_167,  s_168,  s_169,
  s_170,  s_171,  s_172,  s_173,  s_174,  s_175,  s_176,  s_177,  s_178,  s_179,
  s_180,  s_181,  s_182,  s_183,  s_184,  s_185,  s_186,  s_187,  s_188,  s_189,
  s_190,  s_191,  s_192,  s_193,  s_194,  s_195,  s_196,  s_197,  s_198,  s_199,
  s_200,  s_201,  s_202,  s_203,  s_204,  s_205,  s_206,  s_207,  s_208,  s_209,
  s_210,  s_211,  s_212,  s_213,  s_214,
};

} // anonymous namespace ends



// $insert polymorphicCode
namespace Meta_
{

size_t const *t_nErrors;
// $insert idoftag
char const *idOfTag_[] = {
    "BFX_FUNCTION",
    "INSTRUCTION_LIST",
    "PARAMETER",
    "INSTRUCTION",
    "ARRAY_ELEMENT",
    "DECLARATION",
    "STRING",
    "CHAR",
    "PARAMETER_LIST",
    "DECLARATION_LIST",
    "INT",
    "<undefined>"
};

size_t const *s_nErrors_;

Base::~Base()
{}

}   // namespace Meta_

// If the parsing function call (i.e., parse()' needs arguments, then provide
// an overloaded function.  The code below doesn't rely on parameters, so no
// arguments are required.  Furthermore, parse uses a function try block to
// allow us to do ACCEPT and ABORT from anywhere, even from within members
// called by actions, simply throwing the appropriate exceptions.


// base/base1
ParserBase::ParserBase()
:
    d_token(Reserved_::UNDETERMINED_),
    // $insert baseclasscode
    d_requiredTokens_(0)
{
    Meta_::t_nErrors = &d_nErrors_;
}

// base/clearin
void ParserBase::clearin_()
{
    d_nErrors_ = 0;
    d_stackIdx = -1;
    d_stateStack.clear();
    d_token = Reserved_::UNDETERMINED_;
    d_next = TokenPair{ Reserved_::UNDETERMINED_, STYPE_{} };
    d_recovery = false;
    d_acceptedTokens_ = d_requiredTokens_;
    d_val_ = STYPE_{};

    push_(0);
}

// base/debugfunctions

void ParserBase::setDebug(bool mode)
{
    d_actionCases_ = false;
    d_debug_ = mode;
}

void ParserBase::setDebug(DebugMode_ mode)
{
    d_actionCases_ = mode & ACTIONCASES;
    d_debug_ =       mode & ON;
}

// base/lex
void ParserBase::lex_(int token)
{
    d_token = token;

    if (d_token <= 0)
        d_token = Reserved_::EOF_;

    d_terminalToken = true;
}

// base/lookup
int ParserBase::lookup_() const
{
    // if the final transition is negative, then we should reduce by the rule
    // given by its positive value.

    SR_ const *sr = s_state[d_state];
    SR_ const *last = sr + sr->d_lastIdx;

    for ( ; ++sr != last; )           // visit all but the last SR entries
    {
        if (sr->d_token == d_token)
            return sr->d_action;
    }

    if (sr == last)   // reached the last element
    {
        if (sr->d_action < 0)   // default reduction
        {
            return sr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN_;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = sr->d_action;


    return action;
}

// base/pop
void ParserBase::pop_(size_t count)
{
    if (d_stackIdx < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx -= count;
    d_state = d_stateStack[d_stackIdx].first;
    d_vsp = &d_stateStack[d_stackIdx];

}

// base/poptoken
void ParserBase::popToken_()
{
    d_token = d_next.first;
    d_val_ = std::move(d_next.second);

    d_next.first = Reserved_::UNDETERMINED_;
}

// base/push
void ParserBase::push_(size_t state)
{
    size_t currentSize = d_stateStack.size();
    if (stackSize_() == currentSize)
    {
        size_t newSize = currentSize + STACK_EXPANSION_;
        d_stateStack.resize(newSize);
    }

    ++d_stackIdx;
    d_stateStack[d_stackIdx] = 
                    StatePair{ d_state = state, std::move(d_val_) };

    d_vsp = &d_stateStack[d_stackIdx];

    if (d_stackIdx == 0)
    {
    }
    else
    {
    }
}

// base/pushtoken
void ParserBase::pushToken_(int token)
{
    d_next = TokenPair{ d_token, std::move(d_val_) };
    d_token = token;
}

// base/redotoken
void ParserBase::redoToken_()
{
    if (d_token != Reserved_::UNDETERMINED_)
        pushToken_(d_token);
}

// base/reduce
void ParserBase::reduce_(int rule)
{
    PI_ const &pi = s_productionInfo[rule];

    d_token = pi.d_nonTerm;
    pop_(pi.d_size);

    d_terminalToken = false;
}

// base/shift
void ParserBase::shift_(int action)
{
    push_(action);
    popToken_();               // token processed

    if (d_recovery and d_terminalToken)
    {
        d_recovery = false;
        d_acceptedTokens_ = 0;
    }
}

// base/startrecovery
void ParserBase::startRecovery_()
{
    int lastToken = d_token;                // give the unexpected token a
                                            // chance to be processed
                                            // again.

    pushToken_(Reserved_::errTok_);      // specify errTok_ as next token
    push_(lookup_());                     // push the error state

    d_token = lastToken;                    // reactivate the unexpected
                                            // token (we're now in an
                                            // ERROR state).

    d_recovery = true;
}

// base/top
inline size_t ParserBase::top_() const
{
    return d_stateStack[d_stackIdx].first;
}

// derived/errorrecovery
void Parser::errorRecovery_()
{
    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)



    if (d_acceptedTokens_ >= d_requiredTokens_)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors_;                          // were accepted. Otherwise
        error();                                // simply skip input
    }

    // get the error state
    while (not (s_state[top_()][0].d_type & ERR_ITEM))
    {
        pop_();
    }

    // In the error state, looking up a token allows us to proceed.
    // Continuation may be require multiple reductions, but eventually a
    // terminal-token shift is used. See nextCycle_ for details.

    startRecovery_();
}

// derived/executeaction
void Parser::executeAction_(int production)
try
{
    if (token_() != Reserved_::UNDETERMINED_)
        pushToken_(token_());     // save an already available token
    switch (production)
    {
        // $insert actioncases
        
        case 2:
#line 70 "grammar"
        {
            d_val_ = std::move(vs_(-1));
        }
        break;

        case 3:
#line 72 "grammar"
        {
            d_val_ = std::move(vs_(-1));
        }
        break;

        case 4:
#line 74 "grammar"
        {
            d_val_ = std::move(vs_(-1));
        }
        break;

        case 5:
#line 76 "grammar"
        {
            d_val_ = std::move(vs_(-1));
        }
        break;

        case 6:
#line 78 "grammar"
        {
            d_val_ = std::move(vs_(-1));
        }
        break;

        case 7:
#line 82 "grammar"
        {
         d_scanner.pushStream(vs_(0).get<Tag_::STRING>());
         }
        break;

        case 8:
#line 89 "grammar"
        {
         d_comp.addFunction((vs_(-1).get<Tag_::BFX_FUNCTION>()).setBody(vs_(0).get<Tag_::INSTRUCTION>()));
         }
        break;

        case 9:
#line 96 "grammar"
        {
         d_val_ = BFXFunction(vs_(-3).get<Tag_::STRING>(), vs_(-1).get<Tag_::PARAMETER_LIST>());
         }
        break;

        case 10:
#line 101 "grammar"
        {
         d_val_ = BFXFunction(vs_(-3).get<Tag_::STRING>(), vs_(-1).get<Tag_::PARAMETER_LIST>());
         (d_val_.get<Tag_::BFX_FUNCTION>()).setReturnVariable(vs_(-5).get<Tag_::STRING>());
         }
        break;

        case 11:
#line 109 "grammar"
        {
         d_comp.addConstant(vs_(-3).get<Tag_::STRING>(), vs_(-1).get<Tag_::INT>());
         }
        break;

        case 12:
#line 114 "grammar"
        {
         d_comp.addConstant(vs_(-3).get<Tag_::STRING>(), vs_(-1).get<Tag_::CHAR>());
         }
        break;

        case 13:
#line 121 "grammar"
        {
         d_val_ = vs_(-1).get<Tag_::INSTRUCTION>();
         }
        break;

        case 14:
#line 128 "grammar"
        {
         d_val_ = BFXFunction::Parameter(
         vs_(0).get<Tag_::STRING>(),
         BFXFunction::ParameterType::Value
         );
         }
        break;

        case 15:
#line 136 "grammar"
        {
         d_val_ = BFXFunction::Parameter(
         vs_(0).get<Tag_::STRING>(),
         BFXFunction::ParameterType::Reference
         );
         }
        break;

        case 16:
#line 146 "grammar"
        {
         auto ret = std::vector<BFXFunction::Parameter>();
         ret.push_back(vs_(0).get<Tag_::PARAMETER>());
         d_val_ = ret;
         }
        break;

        case 17:
#line 153 "grammar"
        {
         (vs_(-2).get<Tag_::PARAMETER_LIST>()).push_back(vs_(0).get<Tag_::PARAMETER>());
         d_val_ = vs_(-2).get<Tag_::PARAMETER_LIST>();
         }
        break;

        case 18:
#line 161 "grammar"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 19:
#line 163 "grammar"
        {
         d_val_ = std::vector<BFXFunction::Parameter>();
         }
        break;

        case 20:
#line 170 "grammar"
        {
         d_comp.addGlobals(vs_(-1).get<Tag_::DECLARATION_LIST>());
         }
        break;

        case 21:
#line 176 "grammar"
        {
         d_val_ = Instruction([](){ return -1; });
         }
        break;

        case 22:
#line 181 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::mergeInstructions>(vs_(-1).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 23:
#line 188 "grammar"
        {
            d_val_ = std::move(vs_(-1));
        }
        break;

        case 24:
#line 190 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::statement>([](){ return -1; });
         }
        break;

        case 25:
#line 195 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::statement>(vs_(-1).get<Tag_::INSTRUCTION>());
         }
        break;

        case 26:
#line 200 "grammar"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 27:
#line 202 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::inlineBF>(vs_(-2).get<Tag_::STRING>());
         }
        break;

        case 28:
#line 207 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::movePtr>(vs_(-2).get<Tag_::STRING>());
         }
        break;

        case 29:
#line 212 "grammar"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 30:
#line 214 "grammar"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 31:
#line 216 "grammar"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 32:
#line 220 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::declareVariable>((vs_(0).get<Tag_::DECLARATION>()).first, (vs_(0).get<Tag_::DECLARATION>()).second);
         }
        break;

        case 33:
#line 225 "grammar"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 34:
#line 227 "grammar"
        {
         d_comp.compilerError("Negative numbers are not supported.");
         d_val_ = []() { return -1; };
         }
        break;

        case 35:
#line 233 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::fetchElement>(
         (vs_(0).get<Tag_::ARRAY_ELEMENT>()).first,
         (vs_(0).get<Tag_::ARRAY_ELEMENT>()).second
         );
         }
        break;

        case 36:
#line 241 "grammar"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 37:
#line 243 "grammar"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 38:
#line 245 "grammar"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 39:
#line 247 "grammar"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 40:
#line 249 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::sizeOfOperator>(vs_(-1).get<Tag_::STRING>());
         }
        break;

        case 41:
#line 254 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::initializeExpression>(
         (vs_(-2).get<Tag_::DECLARATION>()).first,
         (vs_(-2).get<Tag_::DECLARATION>()).second,
         vs_(0).get<Tag_::INSTRUCTION>()
         );
         }
        break;

        case 42:
#line 263 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::assign>(vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 43:
#line 268 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::assignElement>(
         (vs_(-2).get<Tag_::ARRAY_ELEMENT>()).first,
         (vs_(-2).get<Tag_::ARRAY_ELEMENT>()).second,
         vs_(0).get<Tag_::INSTRUCTION>()
         );
         }
        break;

        case 44:
#line 277 "grammar"
        {
         d_val_ = vs_(-1).get<Tag_::INSTRUCTION>();
         }
        break;

        case 45:
#line 282 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::preIncrement>(vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 46:
#line 287 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::preDecrement>(vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 47:
#line 292 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::postIncrement>(vs_(-1).get<Tag_::INSTRUCTION>());
         }
        break;

        case 48:
#line 297 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::postDecrement>(vs_(-1).get<Tag_::INSTRUCTION>());
         }
        break;

        case 49:
#line 302 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::applyUnaryFunctionToElement>(
         (vs_(0).get<Tag_::ARRAY_ELEMENT>()).first,
         (vs_(0).get<Tag_::ARRAY_ELEMENT>()).second,
         &Compiler::preIncrement
         );
         }
        break;

        case 50:
#line 311 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::applyUnaryFunctionToElement>(
         (vs_(0).get<Tag_::ARRAY_ELEMENT>()).first,
         (vs_(0).get<Tag_::ARRAY_ELEMENT>()).second,
         &Compiler::preDecrement
         );
         }
        break;

        case 51:
#line 320 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::applyUnaryFunctionToElement>(
         (vs_(-1).get<Tag_::ARRAY_ELEMENT>()).first,
         (vs_(-1).get<Tag_::ARRAY_ELEMENT>()).second,
         &Compiler::postIncrement
         );
         }
        break;

        case 52:
#line 329 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::applyUnaryFunctionToElement>(
         (vs_(-1).get<Tag_::ARRAY_ELEMENT>()).first,
         (vs_(-1).get<Tag_::ARRAY_ELEMENT>()).second,
         &Compiler::postDecrement
         );
         }
        break;

        case 53:
#line 338 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::addTo>(vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 54:
#line 343 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::applyBinaryFunctionToElement>(
         (vs_(-2).get<Tag_::ARRAY_ELEMENT>()).first,
         (vs_(-2).get<Tag_::ARRAY_ELEMENT>()).second,
         vs_(0).get<Tag_::INSTRUCTION>(),
         &Compiler::addTo
         );
         }
        break;

        case 55:
#line 353 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::add>(vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 56:
#line 358 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::subtractFrom>(vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 57:
#line 363 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::applyBinaryFunctionToElement>(
         (vs_(-2).get<Tag_::ARRAY_ELEMENT>()).first,
         (vs_(-2).get<Tag_::ARRAY_ELEMENT>()).second,
         vs_(0).get<Tag_::INSTRUCTION>(),
         &Compiler::subtractFrom
         );
         }
        break;

        case 58:
#line 373 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::subtract>(vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 59:
#line 378 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::multiplyBy>(vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 60:
#line 383 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::applyBinaryFunctionToElement>(
         (vs_(-2).get<Tag_::ARRAY_ELEMENT>()).first,
         (vs_(-2).get<Tag_::ARRAY_ELEMENT>()).second,
         vs_(0).get<Tag_::INSTRUCTION>(),
         Compiler::BinaryFunction(&Compiler::multiplyBy)
         );
         }
        break;

        case 61:
#line 393 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::multiply>(vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 62:
#line 398 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::divideBy>(vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 63:
#line 403 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::applyBinaryFunctionToElement>(
         (vs_(-2).get<Tag_::ARRAY_ELEMENT>()).first,
         (vs_(-2).get<Tag_::ARRAY_ELEMENT>()).second,
         vs_(0).get<Tag_::INSTRUCTION>(),
         Compiler::BinaryFunction(&Compiler::divideBy)
         );
         }
        break;

        case 64:
#line 413 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::divide>(vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 65:
#line 418 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::moduloBy>(vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 66:
#line 423 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::applyBinaryFunctionToElement>(
         (vs_(-2).get<Tag_::ARRAY_ELEMENT>()).first,
         (vs_(-2).get<Tag_::ARRAY_ELEMENT>()).second,
         vs_(0).get<Tag_::INSTRUCTION>(),
         Compiler::BinaryFunction(&Compiler::moduloBy)
         );
         }
        break;

        case 67:
#line 433 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::divMod>(vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 68:
#line 438 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::applyBinaryFunctionToElement>(
         (vs_(-2).get<Tag_::ARRAY_ELEMENT>()).first,
         (vs_(-2).get<Tag_::ARRAY_ELEMENT>()).second,
         vs_(0).get<Tag_::INSTRUCTION>(),
         Compiler::BinaryFunction(&Compiler::divMod)
         );
         }
        break;

        case 69:
#line 448 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::modDiv>(vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 70:
#line 453 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::applyBinaryFunctionToElement>(
         (vs_(-2).get<Tag_::ARRAY_ELEMENT>()).first,
         (vs_(-2).get<Tag_::ARRAY_ELEMENT>()).second,
         vs_(0).get<Tag_::INSTRUCTION>(),
         Compiler::BinaryFunction(&Compiler::modDiv)
         );
         }
        break;

        case 71:
#line 463 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::modulo>(vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 72:
#line 468 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::less>(vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 73:
#line 473 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::greater>(vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 74:
#line 478 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::lessOrEqual>(vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 75:
#line 483 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::greaterOrEqual>(vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 76:
#line 488 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::notEqual>(vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 77:
#line 493 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::equal>(vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 78:
#line 498 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::logicalNot>(vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 79:
#line 503 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::logicalAnd>(vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 80:
#line 508 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::logicalOr>(vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 81:
#line 515 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::forStatement>(vs_(-6).get<Tag_::INSTRUCTION>(), vs_(-4).get<Tag_::INSTRUCTION>(), vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 82:
#line 522 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::ifStatement>(vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>(), Instruction([](){ return -1; }));
         }
        break;

        case 83:
#line 527 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::ifStatement>(vs_(-4).get<Tag_::INSTRUCTION>(), vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>()); 
         }
        break;

        case 84:
#line 534 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::whileStatement>(vs_(-2).get<Tag_::INSTRUCTION>(), vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 85:
#line 541 "grammar"
        {
         d_val_ = vs_(0).get<Tag_::DECLARATION>();
         }
        break;

        case 86:
#line 548 "grammar"
        {
         d_val_ = std::pair<std::string, int>(vs_(0).get<Tag_::STRING>(), 1);
         }
        break;

        case 87:
#line 553 "grammar"
        {
         d_val_ = std::pair<std::string, int>(vs_(0).get<Tag_::STRING>(), -1);
         }
        break;

        case 88:
#line 558 "grammar"
        {
         d_val_ = std::pair<std::string, int>(vs_(0).get<Tag_::STRING>(), vs_(-2).get<Tag_::INT>());
         }
        break;

        case 89:
#line 563 "grammar"
        {
         d_val_ = std::pair<std::string, int>(vs_(0).get<Tag_::STRING>(), d_comp.compileTimeConstant(vs_(-2).get<Tag_::STRING>()));
         }
        break;

        case 90:
#line 571 "grammar"
        { 
         d_val_ = std::vector<std::pair<std::string, int>>();
         (d_val_.get<Tag_::DECLARATION_LIST>()).push_back(vs_(0).get<Tag_::DECLARATION>());
         }
        break;

        case 91:
#line 577 "grammar"
        {
         (vs_(-2).get<Tag_::DECLARATION_LIST>()).push_back(vs_(0).get<Tag_::DECLARATION>());
         d_val_ = vs_(-2).get<Tag_::DECLARATION_LIST>();
         }
        break;

        case 92:
#line 585 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::fetch>(vs_(0).get<Tag_::STRING>());
         }
        break;

        case 93:
#line 592 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::constVal>(vs_(0).get<Tag_::INT>());
         }
        break;

        case 94:
#line 597 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::constVal>(vs_(0).get<Tag_::CHAR>());
         }
        break;

        case 95:
#line 604 "grammar"
        {
         d_val_ = std::vector<Instruction>{};
         (d_val_.get<Tag_::INSTRUCTION_LIST>()).push_back(vs_(0).get<Tag_::INSTRUCTION>());
         }
        break;

        case 96:
#line 610 "grammar"
        {
         (vs_(-2).get<Tag_::INSTRUCTION_LIST>()).push_back(vs_(0).get<Tag_::INSTRUCTION>());
         d_val_ = vs_(-2).get<Tag_::INSTRUCTION_LIST>();
         }
        break;

        case 97:
#line 618 "grammar"
        {
         d_val_ = std::vector<Instruction>{};
         }
        break;

        case 98:
#line 623 "grammar"
        {
            d_val_ = std::move(vs_(0));
        }
        break;

        case 99:
#line 628 "grammar"
        {
         d_val_ = std::pair<std::string, Instruction>(vs_(-3).get<Tag_::STRING>(), vs_(-1).get<Tag_::INSTRUCTION>());
         }
        break;

        case 100:
#line 635 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::arrayFromString>(vs_(0).get<Tag_::STRING>());
         }
        break;

        case 101:
#line 642 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::arrayFromList>(vs_(-1).get<Tag_::INSTRUCTION_LIST>());
         }
        break;

        case 102:
#line 647 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::arrayFromSizeStaticValue>(vs_(-1).get<Tag_::INT>(), 0);
         }
        break;

        case 103:
#line 652 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::arrayFromSizeStaticValue>(
         d_comp.compileTimeConstant(vs_(-1).get<Tag_::STRING>()),
         0
         );
         }
        break;

        case 104:
#line 660 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::arrayFromSizeDynamicValue>(vs_(-3).get<Tag_::INT>(), vs_(-1).get<Tag_::INSTRUCTION>());
         }
        break;

        case 105:
#line 665 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::arrayFromSizeDynamicValue>(
         d_comp.compileTimeConstant(vs_(-3).get<Tag_::STRING>()),
         vs_(-1).get<Tag_::INSTRUCTION>()
         );
         }
        break;

        case 106:
#line 675 "grammar"
        {
         d_val_ = d_comp.instruction<&Compiler::call>(vs_(-3).get<Tag_::STRING>(), vs_(-1).get<Tag_::INSTRUCTION_LIST>());
         }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler(exc);
}

// derived/nextcycle
void Parser::nextCycle_()
try
{
    if (s_state[state_()]->d_type & REQ_TOKEN)
        nextToken_();              // obtain next token


    int action = lookup_();        // lookup d_token in d_state

    if (action > 0)                 // SHIFT: push a new state
    {
        shift_(action);
        return;
    }

    if (action < 0)            // REDUCE: execute and pop.
    {

        if (recovery_())
            redoToken_();
        else
            executeAction_(-action);
                                            // next token is the rule's LHS
        reduce_(-action); 
        return;
    }

    if (recovery_())
        ABORT();
    else 
        ACCEPT();
}
catch (ErrorRecovery_)
{
    if (not recovery_())
        errorRecovery_();
    else
    {
        if (token_() == Reserved_::EOF_)
            ABORT();
        popToken_();               // skip the failing token
    }
}


// derived/nexttoken
void Parser::nextToken_()
{ 
    // If d_token is Reserved_::UNDETERMINED_ then if savedToken_() is
    // Reserved_::UNDETERMINED_ another token is obtained from lex(). Then
    // savedToken_() is assigned to d_token.

                                    // no need for a token: got one already
    if (token_() != Reserved_::UNDETERMINED_) 
    {
        return;                             
    }

    if (savedToken_() != Reserved_::UNDETERMINED_)
    {
        popToken_();               // consume pending token
    }
    else
    {
        ++d_acceptedTokens_;       // accept another token (see
                                    // errorRecover())
        lex_(lex());
        print_();
    }
    print();
}

// derived/print
void Parser::print_()
{
// $insert print
}

// derived/parse
int Parser::parse()
try 
{
    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and all relevant variables
    // are initialized by Base::clearin_.
    //
    // Then, in an eternal loop:
    //
    //  1. If a state is a REQ_TOKEN type, then the next token is obtained
    //     from nextToken().  This may very well be the currently available
    //     token. When retrieving a terminal token d_terminal is set to true.
    //
    //  2. lookup() is called, d_token is looked up in the current state's
    //     SR_ array.
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token is not found, and the state has no
    //     default reduction.

    clearin_();                            // initialize, push(0)

    while (true)
    {
// $insert prompt
        nextCycle_();
    }
}
catch (Return_ retValue)
{
    return retValue or d_nErrors_;
}


// derived/tail


