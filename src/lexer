 %class-name Scanner
%filenames scanner
%lex-source = "lex_flexcpp_generated.cc"

ident [_a-zA-Z][_a-zA-Z0-9]*
blanks [[:blank:]\n]

%x string
%x character
%x eolcomment
%x ccomment

%%

{blanks}                    // ignore

"include"                   return ParserBase::INCLUDE;
"function"                  return ParserBase::FUNCTION;
"procedure"                 return ParserBase::PROCEDURE;
"global"                    return ParserBase::GLOBAL;
"const"                     return ParserBase::CONST;
"for"                       return ParserBase::FOR;
"if"                        return ParserBase::IF;
"else"                      return ParserBase::ELSE;
"while"                     return ParserBase::WHILE;
"++"                        return ParserBase::INC;
"--"                        return ParserBase::DEC;
"+="                        return ParserBase::ADD;
"-="                        return ParserBase::SUB;
"*="                        return ParserBase::MUL;
"/="                        return ParserBase::DIV;
"%="                        return ParserBase::MOD;
"/=%"                       return ParserBase::DIVMOD;
"%=/"                       return ParserBase::MODDIV;
"<="                        return ParserBase::LE;
">="                        return ParserBase::GE;
"=="                        return ParserBase::EQ;
"!="                        return ParserBase::NE;
"&&"                        return ParserBase::AND;
"||"                        return ParserBase::OR;
"__bf"                      return ParserBase::INLINE_BF;
"__movePtr"                 return ParserBase::MOVE_PTR;
"sizeof"                    return ParserBase::SIZEOF;


[[:digit:]]+                return ParserBase::NUM;
{ident}                     return ParserBase::IDENT;

"'"."'"                     {
                                setMatched(matched().substr(1, 1));
                                return ParserBase::CHR;
                            }
"'\\"."'"                   {
                                setMatched(escape(matched()[2]));
                                return ParserBase::CHR;
                            }

\"                          {
                                more();
                                begin(StartCondition_::string);
                            }

"//"                        {
                                more();
                                begin(StartCondition_::eolcomment);
                            }

"/*"                        {
                                more();
                                begin(StartCondition_::ccomment);
                            }

.|\n|\r                     return matched()[0];
                            
<string>{
\"                          {
                                begin(StartCondition_::INITIAL);
                                setMatched(matched().substr(1, matched().size() - 2));
                                return ParserBase::STR;
                            }

"\\".                       {
                                setMatched(escape(matched()));
                                more();
                            }
                            
.                           more();
}

<eolcomment>{
\n|\r                       begin(StartCondition_::INITIAL);
.                           more();
}
                
<ccomment>{
"*/"                        begin(StartCondition_::INITIAL);
.|\n|\r                     more();
}
