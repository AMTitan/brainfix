// STD MATH

/* Provided math functions:

   MATHS

   sqrt(x)	              - Calculate the square root of x, rounded down 
   factorial(n)           - Calculate n! (overflows for n > 5) 
   min(x,y)               - Returns the minimum of x and y 
   max(x,y)               - Returns the maximum of x and y 

   BINARY

   to_binary_array(x)     - Returns 8-bit binary representation of x as array of 0's and 1's 
   from_binary_array(x)   - Takes a binary array and converts it back to 8-bit integer 

   BITWISE OPERATIONS

   bit8_or(x, y)          - Returns bitwise OR of x and y (8-bit) 
   bit8_and(x, y)         - Returns bitwise AND of x and y (8-bit) 
   bit8_xor(x, y)         - Returns bitwise XOR of x and y (8-bit)
   bit8_shift_left(x, n)  - Shift the binary representation of x by n bits to the left 
   bit8_shift_right(x, n) - Shift the binary representation of x by n bits to the right

   RANDOM NUMBER GENERATOR

   rand()                 - Generate random number 
*/


function s = sqrt(&x)
{
    let s = 0;
    let previous = 0;
    let y = 1;
    while (s == 0)
    {
        let y2 = y^2;
        if (y2 == x)
            s = y;
        else if (y2 > x || y2 < previous) // check for overflow
            s = y - 1;

        previous = y2;
        ++y;
    }
}

function f = factorial(&x)
{
    let f = 1;
    for (let i = 1; i <= x; ++i)
        f *= i;
}

function m = min(&x, &y)
{
    let m;
    if (x <= y)
        m = x;
    else
        m = y;
}

function m = max(&x, &y)
{
    let m;
    if (x >= y)
        m = x;
    else
        m = y;
}

function arr = to_binary_array(x)
{
    let [] powers = #{128, 64, 32, 16, 8, 4, 2, 1};
    let [8] arr = 0;
    for(let i = 0; i < sizeof(powers); ++i)
    {
        let p = powers[i];
        if (x >= p)
        {
            arr[i] = 1;
            x -= p;
        }
    }
}

function x = from_binary_array(&arr)
{
    let [] powers = #{128, 64, 32, 16, 8, 4, 2, 1};
    let x = 0;
    for(let i = 0; i < sizeof(powers); ++i)
    {
        if (arr[i])
            x += powers[i];
    }
}

function x = bit8_or(x, &y)
{
    let [8] xbits = to_binary_array(x);
    let [8] ybits = to_binary_array(y);
    
    for (let i = 0; i != sizeof(xbits); ++i)
    {
        xbits[i] = xbits[i] || ybits[i];
    }

    x = from_binary_array(xbits);
}

function x = bit8_and(x, &y)
{
    let [8] xbits = to_binary_array(x);
    let [8] ybits = to_binary_array(y);
    
    for (let i = 0; i != sizeof(xbits); ++i)
    {
        xbits[i] = xbits[i] && ybits[i];
    }

    x = from_binary_array(xbits);
}

function x = bit8_xor(x, &y)
{
    let [8] xbits = to_binary_array(x);
    let [8] ybits = to_binary_array(y);
    
    for (let i = 0; i != sizeof(xbits); ++i)
    {
        xbits[i] = xbits[i] != ybits[i];
    }

    x = from_binary_array(xbits);
}

function y = bit8_shift_left(&x, &n)
{
    let [8] xbits = to_binary_array(x);
    let [8] ybits = 0;
    
    for (let i = 0; i != sizeof(xbits) - n; ++i)
    {
        ybits[i] = xbits[i + n];
    }

    let y = from_binary_array(ybits);
}

function y = bit8_shift_right(&x, &n)
{
    let [8] xbits = to_binary_array(x);
    let [8] ybits = 0;
    
    for (let i = 0; i != sizeof(xbits) - n; ++i)
    {
        ybits[i + n] = xbits[i];
    }

    let y = from_binary_array(ybits);
}

function x = rand()
{
    let x = __rand();
}

