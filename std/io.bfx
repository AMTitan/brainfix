// STD IO

/* Provided IO functions:

   OUTPUT

   printc(x)        - Print byte as ASCII character
   printd(x)        - Print byte as decimal
   prints(str)      - Print string (stop at NULL or end of the string)
   println(str)     - Same as prints() but with appended newline
   print_vec(v)     - Print formatted vector, including newline: (v1, v2, v3, ..., vn)
   endl()           - Print a newline (same as printc('\n'))
   
   INPUT

   scanc()          - Read a single byte from stdin
   scand()          - Read at most 3 bytes from stdin and convert to decimal
   scans(buf)       - Read string from stdin. sizeof(buf) determines maximum number of bytes read
   
   CONVERSIONS

   to_int(str)      - Converts string to int
   to_string(x)     - Converts int to string
   to_binary_str(x) - Converts number to binary representation (as string)
   to_hex_str(x)    - Converts number to hexadecimal representation (as string)
*/

function printc(&c)
{
    __movePtr(c);
    __bf(".");
}

function prints(&str)
{
    let i = 0;
    while (i < sizeof(str) && str[i] != 0)
        printc(str[i++]);
}

function println(&x)
{
    prints(x);
    printc('\n');
}

function printd(&x)
{
    prints(to_string(x));
}

function str = to_string(x)
{
    let hundreds = (x %=/ 100);
    let tens = (x %=/ 10);
    let ones = x;
    
    let idx = 0;
    let [3]str = 0;
    
    if (hundreds != 0)
    {
        str[idx++] = hundreds + '0';
        str[idx++] = tens + '0';
    }
    else if (tens != 0)
    {
        str[idx++] = tens + '0';
    }

    str[idx] = ones + '0';
}

function print_vec(&v)
{
    let sz = sizeof(v);
    printc('(');
    for (let i = 0; i != sz; ++i)
    {
        printd(v[i]);
        if (i != sz - 1)
            prints(", ");
    }
    println(")");
}

function endl()
{
    printc('\n');
}

function c = scanc()
{
    /* The argument to __movePtr() is not evaluated,
    so the return value has to be instantiated explicitly. */

    let c;
    __movePtr(c);
    __bf(",");
}

function result = scand()
{
    let [3] input = 0;
    scans(input);

    let [3] powers = #(1, 10, 100);
    let result = 0;
    let j = 0;
    
    for (let i = 0; i != 3; ++i)
    {
        let x = input[2 - i];
        if (x != 0)
            result += (x - '0') * powers[j++];
    }
}

function scans(&buf)
{
    let i = 0;
    let done = 0;
    while (i < sizeof(buf) && !done)
    {
        let c = scanc();
        if (c != '\n')
        {
            buf[i] = c;
            ++i;
        }
        else
        {
            buf[i] = 0;
            done = 1;
        }
    }
}

function result = to_int(&str)
{
    let nDigits = sizeof(str);
    if (nDigits > 3)
        nDigits = 3;

    let [3] powers = #(1, 10, 100);
    let result = 0;
    let j = 0;
    for (let i = 0; i != nDigits; ++i)
    {
        let x = str[nDigits - 1 - i];
        if (x != 0)
            result += (x - '0') * powers[j++];
    }
    
}
function str = to_binary_str(x)
{
    let [] powers = #(128, 64, 32, 16, 8, 4, 2, 1);
    let [] str = "00000000";
    for (let i = 0; i < sizeof(powers); ++i)
    {
        let p = powers[i];
        if (x >= p)
        {
            str[i] = '1';
            x -= p;
        }
    }
}


function str = to_hex_str(x)
{
    let lowNibble = (x /=% 16);
    let [] c      = "0123456789abcdef";
    let [] str    = #('0', 'x', c[x], c[lowNibble]);
}
