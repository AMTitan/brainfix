[x] consteval should take into account the int-type
[x] Bounds checking for known index --> warning or error?
[x] implement while*
[x] make constant evaluation a compiler option (maybe -O0, -O1?)
[x] rename compilerError to error -> see if error() generated by bisonc++ can have other name
[ ] implement optimizing function that reduces e.g. +++++++.[-]+++++ to +++++++.--
    OR revisit keeping track of runtime values and using these to optimize runtimeSetToValue()
[ ] Constants are still needed for O0 generation. However, it should be possible to have array-sizes
    specified by variables known at compile-time.
[x] remove __bf and __movePtr
[x] Update readme
    - new array init syntax: #{}
    - difference between O0 and O1
    - section "Numbers"
    - indexing: bounds check
    - for* while*
[x] Bug: runtime value 0 as index does not return first element    
[x] for-loop init is now in calling scope -> move to for-scope
[x] Check: on disableConstEval, do we need to sync all cells in scope? Or can we skip temps?
    --> YES, WE DO
[x] Check: in Memory::freeTemps() can we speed up by incrementing idx after array-free?
[x] Check: stdlib, scand and scand_4 should use to_int
[x] Crash when return value not specified in function header?!
[x] for (let i = 0; i != 255; ++i) doesn't run
[x] Why does the memory start allocating at cell 2?    
[x] merge for/while condition with breakflag
[x] --no-bcr
[x] Better include: detect (and ignore) circular inclusion, use PATH, slash at the end.
[x] In int16 mode, possible to have control characters that move cursor to prev line?
    --> No int16 mode necessary. Use ANSI escape sequences. Works, but tedious.
[ ] Add basic cursor movement to library using ANSI escape sequences
[ ] Better solution to pass compiler options
