 %class-name Scanner
%filenames scanner
%lex-source = "lex_flexcpp_generated.cc"

ident [_a-zA-Z][_a-zA-Z0-9]*
blanks [[:blank:]\n]

%x string
%x character
%x eolcomment
%x ccomment

%%

{blanks}                    // ignore

"include"                   return CompilerBase::INCLUDE;
"function"                  return CompilerBase::FUNCTION;
"let"                       return CompilerBase::LET;
"struct"                    return CompilerBase::STRUCT;
"global"                    return CompilerBase::GLOBAL;
"const"                     return CompilerBase::CONST;
"for"                       return CompilerBase::FOR;
"if"                        return CompilerBase::IF;
"else"                      return CompilerBase::ELSE;
"while"                     return CompilerBase::WHILE;
"switch"                    return CompilerBase::SWITCH;
"case"                      return CompilerBase::CASE;
"default"                   return CompilerBase::DEFAULT;
"break"                     return CompilerBase::BREAK;
"continue"                  return CompilerBase::CONTINUE;
"return"                    return CompilerBase::RETURN;
"static_assert"             return CompilerBase::ASSERT;
"++"                        return CompilerBase::INC;
"--"                        return CompilerBase::DEC;
"+="                        return CompilerBase::ADD;
"-="                        return CompilerBase::SUB;
"*="                        return CompilerBase::MUL;
"/="                        return CompilerBase::DIV;
"%="                        return CompilerBase::MOD;
"^="                        return CompilerBase::POW;
"/=%"                       return CompilerBase::DIVMOD;
"%=/"                       return CompilerBase::MODDIV;
"<="                        return CompilerBase::LE;
">="                        return CompilerBase::GE;
"=="                        return CompilerBase::EQ;
"!="                        return CompilerBase::NE;
"&&"                        return CompilerBase::AND;
"||"                        return CompilerBase::OR;
"__scan"                    return CompilerBase::SCAN;
"__print"                   return CompilerBase::PRINT;
"__rand"                    return CompilerBase::RAND;
"sizeof"                    return CompilerBase::SIZEOF;


[[:digit:]]+                return CompilerBase::NUM;
{ident}                     return CompilerBase::IDENT;

"'"."'"                     {
                                setMatched(matched().substr(1, 1));
                                return CompilerBase::CHR;
                            }
"'\\"."'"                   {
                                setMatched(escape(matched()[2]));
                                return CompilerBase::CHR;
                            }

\"                          {
                                more();
                                begin(StartCondition_::string);
                            }

"//"                        {
                                more();
                                begin(StartCondition_::eolcomment);
                            }

"/*"                        {
                                ++d_nestedCommentLevel;
                                more();
                                begin(StartCondition_::ccomment);
                            }

.|\n|\r                     return matched()[0];
                            
<string>{
\"                          {
                                begin(StartCondition_::INITIAL);
                                setMatched(matched().substr(1, matched().size() - 2));
                                return CompilerBase::STR;
                            }

"\\".                       {
                                setMatched(escape(matched()));
                                more();
                            }
                            
.                           more();
}

<eolcomment>{
\n|\r                       begin(StartCondition_::INITIAL);
.                           
}
                
<ccomment>{
"/*"                        {
                                 ++d_nestedCommentLevel;
                            }
"*/"                        {
                                if (--d_nestedCommentLevel == 0)
                                   begin(StartCondition_::INITIAL);
                            }
.|\n|\r                     
}
