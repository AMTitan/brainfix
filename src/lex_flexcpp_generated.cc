// Generated by Flexc++ V2.07.07 on Thu, 24 Feb 2022 20:26:50 +0100

#include <iostream>
#include <fstream>
#include <sstream>
#include <stdexcept>

// $insert class_ih
#include "scanner.ih"


    // s_ranges_: use (unsigned) characters as index to obtain
    //           that character's range-number.
    //           The range for EOF is defined in a constant in the
    //           class header file
size_t const ScannerBase::s_ranges_[] =
{
     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
     5, 5, 5, 5, 5, 5, 5, 6, 7, 8, 9, 9,10,11,12,13,13,14,15,16,17,18,19,20,20,
    20,20,20,20,20,20,20,20,21,21,22,23,24,25,25,26,26,26,26,26,26,26,26,26,26,
    26,26,26,26,26,27,28,28,28,28,28,28,28,28,28,28,29,30,31,31,32,33,34,35,36,
    37,38,39,40,41,42,43,43,44,45,46,47,48,49,50,51,52,53,54,55,56,56,57,58,59,
    60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,
    60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,
    60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,
    60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,
    60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,
    60,60,60,60,60,60,
};

// $insert startcondinfo
    // s_dfa_ contains the rows of *all* DFAs ordered by start state.  The
    // enum class StartCondition_is defined in the baseclass header.
    // StartCondition_::INITIAL is always 0.  Each entry defines the row to
    // transit to if the column's character range was sensed. Row numbers are
    // relative to the used DFA, and d_dfaBase_ is set to the first row of
    // the subset to use.  The row's final two values are respectively the
    // rule that may be matched at this state, and the rule's FINAL flag. If
    // the final value equals FINAL (= 1) then, if there's no continuation,
    // the rule is matched. If the BOL flag (8) is also set (so FINAL + BOL (=
    // 9) is set) then the rule only matches when d_atBOL is also true.
int const ScannerBase::s_dfa_[][64] =
{
    // INITIAL
    { 1, 2, 2, 1, 1, 1, 2, 3, 4, 1, 5, 6, 7, 1, 8, 9, 1,10, 1,11,
         12, 1,13,14,15, 1,16,16,16, 1, 1, 1,17, 1,16,16,18,19,20,21,
         22,16,23,16,24,16,16,16,16,16,16,25,16,16,16,26,16,16, 1,27,
          1,-1,    -1, -1},  // 0
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    41, -1},  // 1
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,     0, -1},  // 2
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    41, -1},  // 3
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    38, -1},  // 4
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    41, -1},  // 5
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    41, -1},  // 6
    {31,31,-1,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,
         31,31,31,31,31,31,31,31,31,31,32,31,31,31,31,31,31,31,31,31,
         31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,
         31,-1,    41, -1},  // 7
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    41, -1},  // 8
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,34,-1,-1,-1,-1,
         -1,-1,-1,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    41, -1},  // 9
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,36,-1,-1,
         -1,-1,-1,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    41, -1},  // 10
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,38,-1,-1,-1,-1,39,
         -1,-1,-1,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    41, -1},  // 11
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    34, -1},  // 12
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    41, -1},  // 13
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    41, -1},  // 14
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    41, -1},  // 15
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 16
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,44,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 17
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,45,16,16,16,16,16,
         16,16,16,16,16,16,16,46,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 18
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,47,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 19
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,48,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 20
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,49,16,16,16,16,16,50,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 21
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,51,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 22
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,52,
         16,16,16,16,16,16,53,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 23
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,54,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 24
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,55,16,16,16,16,16,16,16,16,16,56,16,16,57,16,16,-1,-1,
         -1,-1,    35, -1},  // 25
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,58,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 26
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,59,
         -1,-1,    41, -1},  // 27
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    26, -1},  // 28
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,60,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    20, -1},  // 29
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    27, -1},  // 30
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    -1, -1},  // 31
    {62,62,-1,62,62,62,62,62,62,62,62,62,63,62,62,62,62,62,62,62,
         62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,
         62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,
         62,-1,    -1, -1},  // 32
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    18, -1},  // 33
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    14, -1},  // 34
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    16, -1},  // 35
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    15, -1},  // 36
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    17, -1},  // 37
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    40, -1},  // 38
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    39, -1},  // 39
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,64,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    19, -1},  // 40
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    23, -1},  // 41
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    25, -1},  // 42
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    24, -1},  // 43
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,65,16,16,16,16,
         16,16,16,16,16,66,16,16,67,16,16,68,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 44
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,69,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 45
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,70,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 46
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,71,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 47
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,72,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 48
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,73,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 49
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,74,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 50
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,75,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 51
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,     8, -1},  // 52
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,76,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 53
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,77,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 54
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,78,-1,-1,
         -1,-1,    35, -1},  // 55
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,79,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 56
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,80,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 57
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,81,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 58
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    28, -1},  // 59
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    22, -1},  // 60
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    36, -1},  // 61
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,82,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    -1, -1},  // 62
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,82,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    36, -1},  // 63
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    21, -1},  // 64
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,83,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 65
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,84,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 66
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,85,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 67
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,86,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 68
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,87,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 69
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,88,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 70
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,89,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 71
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,90,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 72
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,     7, -1},  // 73
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,91,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 74
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,92,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 75
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,93,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 76
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,     3, -1},  // 77
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,94,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 78
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,95,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 79
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,96,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 80
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,97,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 81
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    37, -1},  // 82
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    29, -1},  // 83
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,98,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 84
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,99,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 85
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,100,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 86
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    12, -1},  // 87
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,101,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 88
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,102,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 89
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,     9, -1},  // 90
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,103,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 91
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,104,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 92
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,105,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 93
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,106,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 94
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,107,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 95
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,108,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 96
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,109,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 97
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,110,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 98
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,111,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 99
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,112,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 100
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,     6, -1},  // 101
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,113,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 102
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,114,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 103
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,115,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 104
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,116,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 105
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,117,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 106
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,118,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 107
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,119,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 108
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    10, -1},  // 109
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,120,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 110
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,121,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 111
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    31, -1},  // 112
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,122,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 113
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,123,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 114
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,     5, -1},  // 115
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,124,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 116
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    33, -1},  // 117
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,     4, -1},  // 118
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    11, -1},  // 119
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,125,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 120
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    32, -1},  // 121
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    13, -1},  // 122
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,126,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 123
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,     1, -1},  // 124
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,127,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    35, -1},  // 125
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,     2, -1},  // 126
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         16,-1,-1,-1,-1,-1,16,16,16,-1,-1,-1,16,-1,16,16,16,16,16,16,
         16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,
         -1,-1,    30, -1},  // 127
    // string
    { 1, 1,-1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1,-1,    -1, -1},  // 0
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    44, -1},  // 1
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    42, -1},  // 2
    { 4, 4,-1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
          4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
          4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
          4,-1,    44, -1},  // 3
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    43, -1},  // 4
    // character
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    -1, -1},  // 0
    // eolcomment
    { 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1,-1,    -1, -1},  // 0
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    46, -1},  // 1
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    45, -1},  // 2
    // ccomment
    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1,-1,    -1, -1},  // 0
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    48, -1},  // 1
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 3,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    48, -1},  // 2
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,    47, -1},  // 3
};


int const (*ScannerBase::s_dfaBase_[])[64] =
{
    s_dfa_ + 0,
    s_dfa_ + 128,
    s_dfa_ + 133,
    s_dfa_ + 134,
    s_dfa_ + 137,
};

size_t ScannerBase::s_istreamNr = 0;

// $insert inputImplementation
ScannerBase::Input::Input()
:
    d_in(0),
    d_lineNr(1)
{}

ScannerBase::Input::Input(std::istream *iStream, size_t lineNr)
:
    d_in(iStream),
    d_lineNr(lineNr)
{}

size_t ScannerBase::Input::get()
{
    switch (size_t ch = next())         // get the next input char
    {
        case '\n':
            ++d_lineNr;
        [[fallthrough]];

        default:
        return ch;
    }
}

size_t ScannerBase::Input::next()
{
    size_t ch;

    if (d_deque.empty())                // deque empty: next char fm d_in
    {
        if (d_in == 0)
            return AT_EOF;
        ch = d_in->get();
        return *d_in ? ch : static_cast<size_t>(AT_EOF);
    }

    ch = d_deque.front();
    d_deque.pop_front();

    return ch;
}

void ScannerBase::Input::reRead(size_t ch)
{
    if (ch < 0x100)
    {
        if (ch == '\n')
            --d_lineNr;
        d_deque.push_front(ch);
    }
}

void ScannerBase::Input::reRead(std::string const &str, size_t fm)
{
    for (size_t idx = str.size(); idx-- > fm; )
        reRead(str[idx]);
}

ScannerBase::ScannerBase(std::istream &in, std::ostream &out)
:
    d_filename("-"),
    d_out(new std::ostream(out.rdbuf())),
// $insert interactiveInit
    d_in(0),
    d_input(new std::istream(in.rdbuf())),
    d_dfaBase_(s_dfa_)
{}

void ScannerBase::switchStream_(std::istream &in, size_t lineNr)
{
    d_input.close();
    d_input = Input(new std::istream(in.rdbuf()), lineNr);
}


ScannerBase::ScannerBase(std::string const &infilename, std::string const &outfilename)
:
    d_filename(infilename),
    d_out(outfilename == "-"    ? new std::ostream(std::cout.rdbuf()) :
          outfilename == ""     ? new std::ostream(std::cerr.rdbuf()) :
                                  new std::ofstream(outfilename)),
    d_input(new std::ifstream(infilename)),
    d_dfaBase_(s_dfa_)
{}

void ScannerBase::switchStreams(std::istream &in, std::ostream &out)
{
    switchStream_(in, 1);
    switchOstream(out);
}


void ScannerBase::switchOstream(std::ostream &out)
{
    *d_out << std::flush;
    d_out.reset(new std::ostream(out.rdbuf()));
}

// $insert debugFunctions
void ScannerBase::setDebug(bool onOff)
{}

bool ScannerBase::debug() const
{
    return false;
}

void ScannerBase::redo(size_t nChars)
{
    size_t from = nChars >= length() ? 0 : length() - nChars;
    d_input.reRead(d_matched, from);
    d_matched.resize(from);
}

void ScannerBase::switchOstream(std::string const &outfilename)
{
    *d_out << std::flush;
    d_out.reset(
            outfilename == "-"    ? new std::ostream(std::cout.rdbuf()) :
            outfilename == ""     ? new std::ostream(std::cerr.rdbuf()) :
                                    new std::ofstream(outfilename));
}


void ScannerBase::switchIstream(std::string const &infilename)
{
    d_input.close();
    d_filename = infilename;
    d_input = Input(new std::ifstream(infilename));
    d_atBOL = true;
}

void ScannerBase::switchStreams(std::string const &infilename,
                           std::string const &outfilename)
{
    switchOstream(outfilename);
    switchIstream(infilename);
}

void ScannerBase::pushStream(std::istream  &istr)
{
    std::istream *streamPtr = new std::istream(istr.rdbuf());
    p_pushStream("(istream)", streamPtr);
}

void ScannerBase::pushStream(std::string const &name)
{
    std::istream *streamPtr = new std::ifstream(name);
    if (!*streamPtr)
    {
        delete streamPtr;
        throw std::runtime_error("Cannot read " + name);
    }
    p_pushStream(name, streamPtr);
}


void ScannerBase::p_pushStream(std::string const &name, std::istream *streamPtr)
{
    if (d_streamStack.size() == s_maxSizeofStreamStack_)
    {
        delete streamPtr;
        throw std::length_error("Max stream stack size exceeded");
    }

    d_streamStack.push_back(StreamStruct{d_filename, d_input});
    d_filename = name;
    d_input = Input(streamPtr);
    d_atBOL = true;
}

bool ScannerBase::popStream()
{
    d_input.close();

    if (d_streamStack.empty())
        return false;

    StreamStruct &top = d_streamStack.back();

    d_input =   top.pushedInput;
    d_filename = top.pushedName;
    d_streamStack.pop_back();

    return true;
}



  // See the manual's section `Run-time operations' section for an explanation
  // of this member.
ScannerBase::ActionType_ ScannerBase::actionType_(size_t range)
{
    d_nextState = d_dfaBase_[d_state][range];

    if (d_nextState != -1)                  // transition is possible
        return ActionType_::CONTINUE;

    if (knownFinalState())                  // FINAL state reached
        return ActionType_::MATCH;         

    if (d_matched.size())
        return ActionType_::ECHO_FIRST;    // no match, echo the 1st char

    return range != s_rangeOfEOF_ ? 
                ActionType_::ECHO_CH 
            : 
                ActionType_::RETURN;
}

void ScannerBase::accept(size_t nChars)          // old name: less
{
    if (nChars < d_matched.size())
    {
        d_input.reRead(d_matched, nChars);
        d_matched.resize(nChars);
    }
}

void ScannerBase::setMatchedSize(size_t length)
{
    d_input.reRead(d_matched, length);  // reread the tail section
    d_matched.resize(length);           // return what's left
}

  // At this point a rule has been matched.  The next character is not part of
  // the matched rule and is sent back to the input.  The final match length
  // is determined, the index of the matched rule is determined, and then
  // d_atBOL is updated. Finally the rule's index is returned.
  // The numbers behind the finalPtr assignments are explained in the 
  // manual's `Run-time operations' section.
size_t ScannerBase::matched_(size_t ch)
{
    d_input.reRead(ch);

    FinalData *finalPtr;
                            
    if (not d_atBOL)                    // not at BOL
        finalPtr = &d_final.std;        // then use the std rule (3, 4)

                                        // at BOL
    else if (not available(d_final.std.rule))   // only a BOL rule avail.
            finalPtr = &d_final.bol;            // use the BOL rule (6)

    else if (not available(d_final.bol.rule)) // only a std rule is avail.
        finalPtr = &d_final.std;        // use the std rule (7)
        
    else if (                           // Both are available (8)
        d_final.bol.length !=           // check lengths of matched texts
        d_final.std.length              // unequal lengths, use the rule
    )                                   // having the longer match length
        finalPtr =              
            d_final.bol.length > d_final.std.length ?
                &d_final.bol
            :
                &d_final.std;

    else                            // lengths are equal: use 1st rule
        finalPtr = 
            d_final.bol.rule < d_final.std.rule ?
                &d_final.bol
            :
                &d_final.std;

    setMatchedSize(finalPtr->length);

    d_atBOL = d_matched.back() == '\n';


    return finalPtr->rule;
}

size_t ScannerBase::getRange_(int ch)       // using int to prevent casts
{
    return ch == AT_EOF ? as<size_t>(s_rangeOfEOF_) : s_ranges_[ch];
}

  // At this point d_nextState contains the next state and continuation is
  // possible. The just read char. is appended to d_match
void ScannerBase::continue_(int ch)
{
    d_state = d_nextState;

    if (ch != AT_EOF)
        d_matched += ch;
}

void ScannerBase::echoCh_(size_t ch)
{
    *d_out << as<char>(ch);
    d_atBOL = ch == '\n';
}


   // At this point there is no continuation. The last character is
   // pushed back into the input stream as well as all but the first char. in
   // the buffer. The first char. in the buffer is echoed to stderr. 
   // If there isn't any 1st char yet then the current char doesn't fit any
   // rules and that char is then echoed
void ScannerBase::echoFirst_(size_t ch)
{
    d_input.reRead(ch);
    d_input.reRead(d_matched, 1);
    echoCh_(d_matched[0]);
}

    // Update the rules associated with the current state, do this separately
    // for BOL and std rules.
    // If a rule was set, update the rule index and the current d_matched
    // length. 
void ScannerBase::updateFinals_()
{
    size_t len = d_matched.size();

    int const *rf = d_dfaBase_[d_state] + s_finIdx_;

    if (rf[0] != -1)        // update to the latest std rule
    {
        d_final.std = FinalData { as<size_t>(rf[0]), len };
    }

    if (rf[1] != -1)        // update to the latest bol rule
    {
        d_final.bol = FinalData { as<size_t>(rf[1]), len };
    }
}

void ScannerBase::reset_()
{
    d_final = Final{ 
                    FinalData{s_unavailable, 0}, 
                    FinalData {s_unavailable, 0} 
                };

    d_state = 0;
    d_return = true;

    if (!d_more)
        d_matched.clear();

    d_more = false;
}

int Scanner::executeAction_(size_t ruleIdx)
try
{
    switch (ruleIdx)
    {
        // $insert actions
        case 1:
        {
#line 17 "lexer"
            return CompilerBase::INCLUDE;
        }
        break;
        case 2:
        {
#line 18 "lexer"
            return CompilerBase::FUNCTION;
        }
        break;
        case 3:
        {
#line 19 "lexer"
            return CompilerBase::LET;
        }
        break;
        case 4:
        {
#line 20 "lexer"
            return CompilerBase::STRUCT;
        }
        break;
        case 5:
        {
#line 21 "lexer"
            return CompilerBase::GLOBAL;
        }
        break;
        case 6:
        {
#line 22 "lexer"
            return CompilerBase::CONST;
        }
        break;
        case 7:
        {
#line 23 "lexer"
            return CompilerBase::FOR;
        }
        break;
        case 8:
        {
#line 24 "lexer"
            return CompilerBase::IF;
        }
        break;
        case 9:
        {
#line 25 "lexer"
            return CompilerBase::ELSE;
        }
        break;
        case 10:
        {
#line 26 "lexer"
            return CompilerBase::WHILE;
        }
        break;
        case 11:
        {
#line 27 "lexer"
            return CompilerBase::SWITCH;
        }
        break;
        case 12:
        {
#line 28 "lexer"
            return CompilerBase::CASE;
        }
        break;
        case 13:
        {
#line 29 "lexer"
            return CompilerBase::DEFAULT;
        }
        break;
        case 14:
        {
#line 30 "lexer"
            return CompilerBase::INC;
        }
        break;
        case 15:
        {
#line 31 "lexer"
            return CompilerBase::DEC;
        }
        break;
        case 16:
        {
#line 32 "lexer"
            return CompilerBase::ADD;
        }
        break;
        case 17:
        {
#line 33 "lexer"
            return CompilerBase::SUB;
        }
        break;
        case 18:
        {
#line 34 "lexer"
            return CompilerBase::MUL;
        }
        break;
        case 19:
        {
#line 35 "lexer"
            return CompilerBase::DIV;
        }
        break;
        case 20:
        {
#line 36 "lexer"
            return CompilerBase::MOD;
        }
        break;
        case 21:
        {
#line 37 "lexer"
            return CompilerBase::DIVMOD;
        }
        break;
        case 22:
        {
#line 38 "lexer"
            return CompilerBase::MODDIV;
        }
        break;
        case 23:
        {
#line 39 "lexer"
            return CompilerBase::LE;
        }
        break;
        case 24:
        {
#line 40 "lexer"
            return CompilerBase::GE;
        }
        break;
        case 25:
        {
#line 41 "lexer"
            return CompilerBase::EQ;
        }
        break;
        case 26:
        {
#line 42 "lexer"
            return CompilerBase::NE;
        }
        break;
        case 27:
        {
#line 43 "lexer"
            return CompilerBase::AND;
        }
        break;
        case 28:
        {
#line 44 "lexer"
            return CompilerBase::OR;
        }
        break;
        case 29:
        {
#line 45 "lexer"
            return CompilerBase::INLINE_BF;
        }
        break;
        case 30:
        {
#line 46 "lexer"
            return CompilerBase::MOVE_PTR;
        }
        break;
        case 31:
        {
#line 47 "lexer"
            return CompilerBase::SCAN;
        }
        break;
        case 32:
        {
#line 48 "lexer"
            return CompilerBase::PRINT;
        }
        break;
        case 33:
        {
#line 49 "lexer"
            return CompilerBase::SIZEOF;
        }
        break;
        case 34:
        {
#line 52 "lexer"
            return CompilerBase::NUM;
        }
        break;
        case 35:
        {
#line 53 "lexer"
            return CompilerBase::IDENT;
        }
        break;
        case 36:
        {
#line 55 "lexer"
            {
                setMatched(matched().substr(1, 1));
                return CompilerBase::CHR;
            }
        }
        break;
        case 37:
        {
#line 59 "lexer"
            {
                setMatched(escape(matched()[2]));
                return CompilerBase::CHR;
            }
        }
        break;
        case 38:
        {
#line 64 "lexer"
            {
                more();
                begin(StartCondition_::string);
            }
        }
        break;
        case 39:
        {
#line 69 "lexer"
            {
                more();
                begin(StartCondition_::eolcomment);
            }
        }
        break;
        case 40:
        {
#line 74 "lexer"
            {
                more();
                begin(StartCondition_::ccomment);
            }
        }
        break;
        case 41:
        {
#line 79 "lexer"
            return matched()[0];
        }
        break;
        case 42:
        {
#line 82 "lexer"
            {
                begin(StartCondition_::INITIAL);
                setMatched(matched().substr(1, matched().size() - 2));
                return CompilerBase::STR;
            }
        }
        break;
        case 43:
        {
#line 88 "lexer"
            {
                setMatched(escape(matched()));
                more();
            }
        }
        break;
        case 44:
        {
#line 93 "lexer"
            more();
        }
        break;
        case 45:
        {
#line 97 "lexer"
            begin(StartCondition_::INITIAL);
        }
        break;
        case 46:
        {
#line 98 "lexer"
            more();
        }
        break;
        case 47:
        {
#line 102 "lexer"
            begin(StartCondition_::INITIAL);
        }
        break;
        case 48:
        {
#line 103 "lexer"
            more();
        }
        break;
    }
    noReturn_();
    return 0;
}
catch (Leave_ value)
{
    return static_cast<int>(value);
}

int Scanner::lex_()
{
    reset_();
    preCode();

    while (true)
    {
        size_t ch = get_();                // fetch next char
        size_t range = getRange_(ch);      // determine the range

        updateFinals_();                    // update the state's Final info

        switch (actionType_(range))        // determine the action
        {
            case ActionType_::CONTINUE:
                continue_(ch);
            continue;

            case ActionType_::MATCH:
            {
                d_token_ = executeAction_(matched_(ch));
                if (return_())
                {
                    print();
                    postCode(PostEnum_::RETURN);
                    return d_token_;
                }
                break;
            }

            case ActionType_::ECHO_FIRST:
                echoFirst_(ch);
            break;

            case ActionType_::ECHO_CH:
                echoCh_(ch);
            break;

            case ActionType_::RETURN:
                if (!popStream())
                {
                     postCode(PostEnum_::END);
                     return 0;
                }
                postCode(PostEnum_::POP);
             continue;
        } // switch

        postCode(PostEnum_::WIP);

        reset_();
        preCode();
    } // while
}

void ScannerBase::print_() const
{
}


